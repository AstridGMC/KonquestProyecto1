
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 31 18:19:54 CST 2020
//----------------------------------------------------

package Backend.FlexYCup;

import java.util.LinkedList;
import java_cup.runtime.*;
import Backend.Clases.ErrorS;
import java.util.ArrayList;
import Backend.Clases.Planeta;
import Backend.Clases.Jugador;
import Backend.Clases.Mapa;
import Backend.Clases.PlanetaNeutral;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 31 18:19:54 CST 2020
  */
public class Parse extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parse() {super();}

  /** Constructor which sets the default scanner. */
  public Parse(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parse(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\006\007\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\004\000\002\006\003\000" +
    "\002\024\002\000\002\007\011\000\002\025\002\000\002" +
    "\007\010\000\002\026\002\000\002\007\007\000\002\027" +
    "\002\000\002\007\007\000\002\030\002\000\002\007\007" +
    "\000\002\031\002\000\002\007\007\000\002\032\002\000" +
    "\002\007\010\000\002\033\002\000\002\007\007\000\002" +
    "\007\004\000\002\007\003\000\002\034\002\000\002\005" +
    "\007\000\002\035\002\000\002\005\007\000\002\005\004" +
    "\000\002\005\003\000\002\036\002\000\002\010\007\000" +
    "\002\037\002\000\002\010\007\000\002\040\002\000\002" +
    "\010\007\000\002\010\004\000\002\010\003\000\002\011" +
    "\004\000\002\011\004\000\002\015\004\000\002\015\004" +
    "\000\002\041\002\000\002\014\011\000\002\042\002\000" +
    "\002\014\007\000\002\043\002\000\002\014\007\000\002" +
    "\044\002\000\002\014\007\000\002\014\004\000\002\045" +
    "\002\000\002\014\005\000\002\014\003\000\002\046\002" +
    "\000\002\013\011\000\002\047\002\000\002\013\007\000" +
    "\002\050\002\000\002\013\007\000\002\051\002\000\002" +
    "\013\007\000\002\013\004\000\002\052\002\000\002\013" +
    "\005\000\002\013\003\000\002\017\004\000\002\017\004" +
    "\000\002\053\002\000\002\003\011\000\002\003\007\000" +
    "\002\003\010\000\002\003\004\000\002\054\002\000\002" +
    "\003\005\000\002\003\003\000\002\055\002\000\002\020" +
    "\007\000\002\020\004\000\002\020\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\016\003\000" +
    "\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\040\005\001\002\000\004\002\326\001" +
    "\002\000\016\004\015\005\010\006\011\041\014\044\006" +
    "\053\012\001\002\000\016\004\015\005\010\006\011\041" +
    "\014\044\006\053\012\001\002\000\004\002\uffff\001\002" +
    "\000\004\042\261\001\002\000\004\042\215\001\002\000" +
    "\004\042\142\001\002\000\004\002\000\001\002\000\004" +
    "\002\ufff9\001\002\000\004\042\016\001\002\000\004\040" +
    "\017\001\002\000\026\013\026\014\027\015\031\024\023" +
    "\025\030\026\025\027\032\035\024\041\022\044\021\001" +
    "\002\000\016\004\015\005\010\006\011\041\014\044\006" +
    "\053\012\001\002\000\026\013\026\014\027\015\031\024" +
    "\023\025\030\026\025\027\032\035\024\041\022\044\021" +
    "\001\002\000\016\004\uffe7\005\uffe7\006\uffe7\041\uffe7\044" +
    "\uffe7\053\uffe7\001\002\000\004\042\134\001\002\000\004" +
    "\042\130\001\002\000\004\042\124\001\002\000\004\042" +
    "\120\001\002\000\004\042\112\001\002\000\004\042\106" +
    "\001\002\000\004\042\064\001\002\000\004\042\033\001" +
    "\002\000\004\040\034\001\002\000\014\030\040\031\036" +
    "\034\037\041\041\044\035\001\002\000\014\030\040\031" +
    "\036\034\037\041\041\044\035\001\002\000\004\042\057" +
    "\001\002\000\004\042\053\001\002\000\004\042\045\001" +
    "\002\000\026\013\uffd9\014\uffd9\015\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\035\uffd9\041\uffd9\044\uffd9\001\002\000" +
    "\026\013\uffec\014\uffec\015\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\035\uffec\041\uffec\044\uffec\001\002\000\026\013" +
    "\026\014\027\015\031\024\023\025\030\026\025\027\032" +
    "\035\024\041\022\044\021\001\002\000\016\004\uffeb\005" +
    "\uffeb\006\uffeb\041\uffeb\044\uffeb\053\uffeb\001\002\000\006" +
    "\047\047\050\050\001\002\000\014\030\uffe0\031\uffe0\034" +
    "\uffe0\041\uffe0\044\uffe0\001\002\000\034\013\uffab\014\uffab" +
    "\015\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\034\uffab\035\uffab\041\uffab\044\uffab\001\002\000\034" +
    "\013\uffaa\014\uffaa\015\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\034\uffaa\035\uffaa\041\uffaa\044\uffaa" +
    "\001\002\000\014\030\040\031\036\034\037\041\041\044" +
    "\035\001\002\000\026\013\uffdf\014\uffdf\015\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\035\uffdf\041\uffdf\044\uffdf\001" +
    "\002\000\004\052\054\001\002\000\014\030\uffdc\031\uffdc" +
    "\034\uffdc\041\uffdc\044\uffdc\001\002\000\014\030\040\031" +
    "\036\034\037\041\041\044\035\001\002\000\026\013\uffdb" +
    "\014\uffdb\015\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\035" +
    "\uffdb\041\uffdb\044\uffdb\001\002\000\006\047\047\050\050" +
    "\001\002\000\014\030\uffde\031\uffde\034\uffde\041\uffde\044" +
    "\uffde\001\002\000\014\030\040\031\036\034\037\041\041" +
    "\044\035\001\002\000\026\013\uffdd\014\uffdd\015\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\035\uffdd\041\uffdd\044\uffdd" +
    "\001\002\000\026\013\uffda\014\uffda\015\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\035\uffda\041\uffda\044\uffda\001\002" +
    "\000\004\040\065\001\002\000\012\016\071\023\067\041" +
    "\072\044\066\001\002\000\012\016\071\023\067\041\072" +
    "\044\066\001\002\000\004\042\101\001\002\000\026\013" +
    "\ufff6\014\ufff6\015\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\035\ufff6\041\ufff6\044\ufff6\001\002\000\004\042\073\001" +
    "\002\000\026\013\uffe1\014\uffe1\015\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\035\uffe1\041\uffe1\044\uffe1\001\002\000" +
    "\004\052\074\001\002\000\012\016\uffe6\023\uffe6\041\uffe6" +
    "\044\uffe6\001\002\000\012\016\071\023\067\041\072\044" +
    "\066\001\002\000\026\013\uffe5\014\uffe5\015\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\035\uffe5\041\uffe5\044\uffe5\001" +
    "\002\000\026\013\026\014\027\015\031\024\023\025\030" +
    "\026\025\027\032\035\024\041\022\044\021\001\002\000" +
    "\016\004\ufff5\005\ufff5\006\ufff5\041\ufff5\044\ufff5\053\ufff5" +
    "\001\002\000\004\052\102\001\002\000\012\016\uffe4\023" +
    "\uffe4\041\uffe4\044\uffe4\001\002\000\012\016\071\023\067" +
    "\041\072\044\066\001\002\000\026\013\uffe3\014\uffe3\015" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\035\uffe3\041\uffe3" +
    "\044\uffe3\001\002\000\026\013\uffe2\014\uffe2\015\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\035\uffe2\041\uffe2\044\uffe2" +
    "\001\002\000\006\047\047\050\050\001\002\000\026\013" +
    "\ufff0\014\ufff0\015\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\035\ufff0\041\ufff0\044\ufff0\001\002\000\026\013\026\014" +
    "\027\015\031\024\023\025\030\026\025\027\032\035\024" +
    "\041\022\044\021\001\002\000\016\004\uffef\005\uffef\006" +
    "\uffef\041\uffef\044\uffef\053\uffef\001\002\000\004\043\113" +
    "\001\002\000\004\007\114\001\002\000\004\043\ufff8\001" +
    "\002\000\004\043\116\001\002\000\026\013\026\014\027" +
    "\015\031\024\023\025\030\026\025\027\032\035\024\041" +
    "\022\044\021\001\002\000\016\004\ufff7\005\ufff7\006\ufff7" +
    "\041\ufff7\044\ufff7\053\ufff7\001\002\000\006\047\047\050" +
    "\050\001\002\000\026\013\ufff4\014\ufff4\015\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\035\ufff4\041\ufff4\044\ufff4\001" +
    "\002\000\026\013\026\014\027\015\031\024\023\025\030" +
    "\026\025\027\032\035\024\041\022\044\021\001\002\000" +
    "\016\004\ufff3\005\ufff3\006\ufff3\041\ufff3\044\ufff3\053\ufff3" +
    "\001\002\000\006\047\047\050\050\001\002\000\026\013" +
    "\uffee\014\uffee\015\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\035\uffee\041\uffee\044\uffee\001\002\000\026\013\026\014" +
    "\027\015\031\024\023\025\030\026\025\027\032\035\024" +
    "\041\022\044\021\001\002\000\016\004\uffed\005\uffed\006" +
    "\uffed\041\uffed\044\uffed\053\uffed\001\002\000\004\052\131" +
    "\001\002\000\026\013\uffea\014\uffea\015\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\035\uffea\041\uffea\044\uffea\001\002" +
    "\000\026\013\026\014\027\015\031\024\023\025\030\026" +
    "\025\027\032\035\024\041\022\044\021\001\002\000\016" +
    "\004\uffe9\005\uffe9\006\uffe9\041\uffe9\044\uffe9\053\uffe9\001" +
    "\002\000\004\052\135\001\002\000\026\013\ufff2\014\ufff2" +
    "\015\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\035\ufff2\041" +
    "\ufff2\044\ufff2\001\002\000\026\013\026\014\027\015\031" +
    "\024\023\025\030\026\025\027\032\035\024\041\022\044" +
    "\021\001\002\000\016\004\ufff1\005\ufff1\006\ufff1\041\ufff1" +
    "\044\ufff1\053\ufff1\001\002\000\016\004\uffe8\005\uffe8\006" +
    "\uffe8\041\uffe8\044\uffe8\053\uffe8\001\002\000\004\002\ufffe" +
    "\001\002\000\004\037\143\001\002\000\006\040\146\044" +
    "\144\001\002\000\006\040\146\044\144\001\002\000\004" +
    "\036\212\001\002\000\014\010\151\032\153\033\152\041" +
    "\154\044\147\001\002\000\014\010\151\032\153\033\152" +
    "\041\154\044\147\001\002\000\004\036\uffbc\001\002\000" +
    "\004\042\203\001\002\000\004\042\173\001\002\000\004" +
    "\042\157\001\002\000\010\036\uffb3\040\uffb5\044\uffb5\001" +
    "\002\000\006\040\146\044\144\001\002\000\004\036\uffb4" +
    "\001\002\000\004\037\160\001\002\000\010\036\164\043" +
    "\163\044\161\001\002\000\010\036\164\043\163\044\161" +
    "\001\002\000\014\010\151\032\153\033\152\041\154\044" +
    "\147\001\002\000\004\007\165\001\002\000\014\010\uffaf" +
    "\032\uffaf\033\uffaf\041\uffaf\044\uffaf\001\002\000\004\043" +
    "\166\001\002\000\010\036\uffb2\043\uffb2\044\uffb2\001\002" +
    "\000\010\036\164\043\163\044\161\001\002\000\014\010" +
    "\uffb1\032\uffb1\033\uffb1\041\uffb1\044\uffb1\001\002\000\004" +
    "\036\uffb8\001\002\000\014\010\uffb0\032\uffb0\033\uffb0\041" +
    "\uffb0\044\uffb0\001\002\000\004\043\174\001\002\000\010" +
    "\020\177\021\176\022\175\001\002\000\004\043\uffac\001" +
    "\002\000\004\043\uffad\001\002\000\004\043\uffae\001\002" +
    "\000\004\043\201\001\002\000\014\010\151\032\153\033" +
    "\152\041\154\044\147\001\002\000\004\036\uffb7\001\002" +
    "\000\004\043\204\001\002\000\004\007\205\001\002\000" +
    "\004\043\206\001\002\000\014\010\uffba\032\uffba\033\uffba" +
    "\041\uffba\044\uffba\001\002\000\014\010\151\032\153\033" +
    "\152\041\154\044\147\001\002\000\004\036\uffb9\001\002" +
    "\000\004\036\uffb6\001\002\000\016\004\015\005\010\006" +
    "\011\041\014\044\006\053\012\001\002\000\004\002\ufffb" +
    "\001\002\000\004\036\uffbb\001\002\000\004\037\216\001" +
    "\002\000\006\040\221\044\217\001\002\000\006\040\221" +
    "\044\217\001\002\000\004\036\256\001\002\000\016\010" +
    "\225\011\223\012\226\034\227\041\230\044\222\001\002" +
    "\000\016\010\225\011\223\012\226\034\227\041\230\044" +
    "\222\001\002\000\004\042\251\001\002\000\004\036\uffd6" +
    "\001\002\000\004\042\243\001\002\000\004\042\237\001" +
    "\002\000\004\042\233\001\002\000\010\036\uffc9\040\uffcb" +
    "\044\uffcb\001\002\000\006\040\221\044\217\001\002\000" +
    "\004\036\uffca\001\002\000\004\052\234\001\002\000\016" +
    "\010\uffd0\011\uffd0\012\uffd0\034\uffd0\041\uffd0\044\uffd0\001" +
    "\002\000\016\010\225\011\223\012\226\034\227\041\230" +
    "\044\222\001\002\000\004\036\uffcf\001\002\000\004\046" +
    "\240\001\002\000\016\010\uffce\011\uffce\012\uffce\034\uffce" +
    "\041\uffce\044\uffce\001\002\000\016\010\225\011\223\012" +
    "\226\034\227\041\230\044\222\001\002\000\004\036\uffcd" +
    "\001\002\000\004\043\244\001\002\000\004\007\245\001" +
    "\002\000\004\043\uffd4\001\002\000\004\043\247\001\002" +
    "\000\016\010\225\011\223\012\226\034\227\041\230\044" +
    "\222\001\002\000\004\036\uffd3\001\002\000\004\052\252" +
    "\001\002\000\016\010\uffd2\011\uffd2\012\uffd2\034\uffd2\041" +
    "\uffd2\044\uffd2\001\002\000\016\010\225\011\223\012\226" +
    "\034\227\041\230\044\222\001\002\000\004\036\uffd1\001" +
    "\002\000\004\036\uffcc\001\002\000\016\004\015\005\010" +
    "\006\011\041\014\044\006\053\012\001\002\000\004\002" +
    "\ufffc\001\002\000\004\036\uffd5\001\002\000\004\037\262" +
    "\001\002\000\006\040\264\044\263\001\002\000\006\040" +
    "\264\044\263\001\002\000\016\010\272\011\271\012\274" +
    "\034\275\041\276\044\270\001\002\000\004\036\266\001" +
    "\002\000\016\004\015\005\010\006\011\041\014\044\006" +
    "\053\012\001\002\000\004\002\ufffd\001\002\000\016\010" +
    "\272\011\271\012\274\034\275\041\276\044\270\001\002" +
    "\000\004\042\317\001\002\000\004\042\311\001\002\000" +
    "\004\036\uffd8\001\002\000\004\042\305\001\002\000\004" +
    "\042\301\001\002\000\010\036\uffbd\040\uffbf\044\uffbf\001" +
    "\002\000\006\040\264\044\263\001\002\000\004\036\uffbe" +
    "\001\002\000\004\052\302\001\002\000\016\010\uffc4\011" +
    "\uffc4\012\uffc4\034\uffc4\041\uffc4\044\uffc4\001\002\000\016" +
    "\010\272\011\271\012\274\034\275\041\276\044\270\001" +
    "\002\000\004\036\uffc3\001\002\000\004\046\306\001\002" +
    "\000\016\010\uffc2\011\uffc2\012\uffc2\034\uffc2\041\uffc2\044" +
    "\uffc2\001\002\000\016\010\272\011\271\012\274\034\275" +
    "\041\276\044\270\001\002\000\004\036\uffc1\001\002\000" +
    "\004\043\312\001\002\000\004\007\313\001\002\000\004" +
    "\043\uffc8\001\002\000\004\043\315\001\002\000\016\010" +
    "\272\011\271\012\274\034\275\041\276\044\270\001\002" +
    "\000\004\036\uffc7\001\002\000\004\052\320\001\002\000" +
    "\016\010\uffc6\011\uffc6\012\uffc6\034\uffc6\041\uffc6\044\uffc6" +
    "\001\002\000\016\010\272\011\271\012\274\034\275\041" +
    "\276\044\270\001\002\000\004\036\uffc5\001\002\000\004" +
    "\036\uffc0\001\002\000\004\036\uffd7\001\002\000\004\002" +
    "\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\004\006\006\012\001\001\000\004\006\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\017\001\001\000" +
    "\004\006\140\001\001\000\004\007\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\041\001\001\000\004\010\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\042\001\001\000\004\007\043\001\001" +
    "\000\002\001\001\000\004\016\045\001\001\000\004\036" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\054\001\001\000\004\010\055\001\001\000\002" +
    "\001\001\000\004\016\057\001\001\000\004\037\060\001" +
    "\001\000\004\010\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\067\001\001\000" +
    "\004\005\104\001\001\000\002\001\001\000\004\025\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\074\001\001\000\004\005\075\001\001" +
    "\000\002\001\001\000\004\007\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\102\001\001\000\004" +
    "\005\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\106\001\001\000\004\030\107\001\001\000\004" +
    "\007\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\114\001\001\000\002\001\001" +
    "\000\004\007\116\001\001\000\002\001\001\000\004\016" +
    "\120\001\001\000\004\026\121\001\001\000\004\007\122" +
    "\001\001\000\002\001\001\000\004\016\124\001\001\000" +
    "\004\031\125\001\001\000\004\007\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\131\001\001\000" +
    "\004\007\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\135\001\001\000\004\007\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\144\001\001\000\004\017\213\001" +
    "\001\000\002\001\001\000\004\003\147\001\001\000\004" +
    "\003\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\154\001\001" +
    "\000\004\017\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\161\001\001\000\004\020\171\001\001" +
    "\000\004\003\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\166\001\001\000\004" +
    "\020\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\206\001\001\000\004\003\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\217\001\001\000\004\015\257\001\001\000\002\001" +
    "\001\000\004\014\223\001\001\000\004\014\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\230\001\001" +
    "\000\004\015\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\234\001\001\000\004\014\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\240\001" +
    "\001\000\004\014\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\245\001\001\000" +
    "\002\001\001\000\004\014\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\252\001\001\000\004\014" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\264\001\001\000\004\011\323" +
    "\001\001\000\004\013\272\001\001\000\002\001\001\000" +
    "\004\006\266\001\001\000\002\001\001\000\004\013\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\276" +
    "\001\001\000\004\011\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\302\001\001\000\004\013\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\306\001\001\000\004\013\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\313\001" +
    "\001\000\002\001\001\000\004\013\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\320\001\001\000" +
    "\004\013\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Planeta> planetas = new ArrayList();
    public static ArrayList<Jugador> jugadores= new ArrayList();
    public static ArrayList<PlanetaNeutral> planetasNeutrales = new ArrayList();
    public static Mapa mapa = new Mapa();
    LinkedList tablaErroresSintacticos =  new LinkedList();
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila =  s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo"  );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        tablaErroresSintacticos.add(error);
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        tablaErroresSintacticos.add(error);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parse$actions {



    String nombre;
    int naves;
    int produccion;
    float porcentajeMuertes;
    boolean neutral;
    boolean miboolean;
    int numeroNaves;
    int punteo;
    ArrayList<Planeta> planetasConquistados  = new ArrayList();
    int[ ] tamMapa = new int[2];
    String tipo;
    Planeta planeta  = new Planeta();
    PlanetaNeutral planetaNeutral  = new PlanetaNeutral();
    String padre;
   
    String padreCarpeta;

  private final Parse parser;

  /** Constructor */
  CUP$Parse$actions(Parse parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parse$do_action(
    int                        CUP$Parse$act_num,
    java_cup.runtime.lr_parser CUP$Parse$parser,
    java.util.Stack            CUP$Parse$stack,
    int                        CUP$Parse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parse$result;

      /* select the action based on the action number */
      switch (CUP$Parse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // booleano ::= FALSE 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
		System.out.println(bool+"kjkj");miboolean = Boolean.parseBoolean(bool.toString());
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("booleano",12, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // booleano ::= TRUE 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
		System.out.println(bool+"kjkj"); miboolean = Boolean.parseBoolean(bool.toString()); 
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("booleano",12, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipoJugador ::= HUMANO 
            {
              Object RESULT =null;
		tipo = "HUMANO"; System.out.println("tipo2");
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("tipoJugador",8, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipoJugador ::= DIFICIL 
            {
              Object RESULT =null;
		tipo = "COMPUTADORA DIFICIL"; System.out.println("tipo2");
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("tipoJugador",8, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipoJugador ::= FACIL 
            {
              Object RESULT =null;
		tipo = "COMPUTADORA FACIL"; System.out.println("tipo2");
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("tipoJugador",8, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cuerpoPlanetasJugador ::= CORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJugador",14, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpoPlanetasJugador ::= COMA cuerpoPlanetasJugador 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJugador",14, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpoPlanetasJugador ::= COMILLA ID COMILLA NT$25 cuerpoPlanetasJugador 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-3)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJugador",14, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$25 ::= 
            {
              Object RESULT =null;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
 System.out.println(planeta+"   "+  planetasConquistados.size()); Planeta miPlaneta= new Planeta(); miPlaneta.setNombre(planeta.toString()); planetasConquistados.add(miPlaneta); System.out.println("despues"+planetasConquistados.size());
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$25",43, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpoJugadoresJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;
		System.out.println(planetasConquistados.get(0).getNombre()); 
                                                  System.out.println("guarda****"); 
                                                  ArrayList<Planeta> plan = new ArrayList(); 
                                                    Jugador jugador = new Jugador(nombre, planeta.asignarPlanetasArreglos(planetasConquistados,plan ), tipo ); 
                                                    System.out.println(jugador.getPlanetasConquistados().get(0).getNombre()); 
                                                    Parser.jugadores.add(jugador); planetasConquistados.clear();
                                                
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpoJugadoresJason ::= CIERRACORCHETE NT$24 jugadoresJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$24 ::= 
            {
              Object RESULT =null;
System.out.println(planetasConquistados.get(0).getNombre()); 
                                                    System.out.println("guarda****"); 
                                                    ArrayList<Planeta> plan = new ArrayList(); 
                                                    Jugador jugador = new Jugador(nombre, planeta.asignarPlanetasArreglos(planetasConquistados,plan ), tipo ); 
                                                    System.out.println(jugador.getPlanetasConquistados().get(0).getNombre()); 
                                                    Parser.jugadores.add(jugador); planetasConquistados.clear();
                                                
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$24",42, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpoJugadoresJason ::= COMA cuerpoJugadoresJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cuerpoJugadoresJason ::= TIPOJUGADORid DOSPUNTOS COMILLA tipoJugador COMILLA cuerpoJugadoresJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-5)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpoJugadoresJason ::= PLANETASid DOSPUNTOS CORCHETEABRE cuerpoPlanetasJugador cuerpoJugadoresJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpoJugadoresJason ::= NOMBREid DOSPUNTOS COMILLA ID COMILLA NT$23 cuerpoJugadoresJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int nomJugadorleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).left;
		int nomJugadorright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).right;
		Object nomJugador = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-3)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-6)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$23 ::= 
            {
              Object RESULT =null;
		int nomJugadorleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)).left;
		int nomJugadorright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)).right;
		Object nomJugador = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
System.out.println("nombre"); nombre = nomJugador.toString();
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$23",41, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // jugadoresJason ::= COMA jugadoresJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("jugadoresJason",13, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // jugadoresJason ::= ABRECORCHETE cuerpoJugadoresJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("jugadoresJason",13, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cuerpoPlanetasNeutralesJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",9, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpoPlanetasNeutralesJason ::= CIERRACORCHETE NT$22 planetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",9, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$22 ::= 
            {
              Object RESULT =null;
System.out.println( nombre+ naves+ produccion+porcentajeMuertes+ false +"neutral");PlanetaNeutral planetaNuevo = new PlanetaNeutral(nombre, naves, produccion,porcentajeMuertes, true); Parser.planetasNeutrales.add(planetaNuevo);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$22",40, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpoPlanetasNeutralesJason ::= COMA cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",9, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpoPlanetasNeutralesJason ::= PORMUERTESid DOSPUNTOS NUMMUERTES NT$21 cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int porMuertesleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int porMuertesright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object porMuertes = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",9, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$21 ::= 
            {
              Object RESULT =null;
		int porMuertesleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int porMuertesright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object porMuertes = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
porcentajeMuertes =  Float.parseFloat(porMuertes.toString());
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$21",39, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpoPlanetasNeutralesJason ::= PRODUCCIONid DOSPUNTOS ENTERO NT$20 cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int produccion1left = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int produccion1right = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object produccion1 = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",9, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$20 ::= 
            {
              Object RESULT =null;
		int produccion1left = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int produccion1right = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object produccion1 = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
produccion = Integer.parseInt( produccion1.toString()); 
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$20",38, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpoPlanetasNeutralesJason ::= NAVESid DOSPUNTOS ENTERO NT$19 cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int numeroNavesleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int numeroNavesright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object numeroNaves = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",9, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$19 ::= 
            {
              Object RESULT =null;
		int numeroNavesleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int numeroNavesright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object numeroNaves = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
naves = Integer.parseInt( numeroNaves.toString()); 
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$19",37, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpoPlanetasNeutralesJason ::= NOMBREid DOSPUNTOS COMILLA ID NT$18 COMILLA cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;
		int nombreMiPlanetaleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).left;
		int nombreMiPlanetaright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).right;
		Object nombreMiPlaneta = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-3)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",9, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-6)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$18 ::= 
            {
              Object RESULT =null;
		int nombreMiPlanetaleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int nombreMiPlanetaright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object nombreMiPlaneta = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
nombre = nombreMiPlaneta.toString();
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$18",36, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpoPlanetasJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;
		System.out.println( nombre+ naves+ produccion+porcentajeMuertes+ false +"neutral");Planeta planetaNuevo = new Planeta(nombre, naves, produccion,porcentajeMuertes, false); Parser.planetas.add(planetaNuevo);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",10, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpoPlanetasJason ::= CIERRACORCHETE NT$17 planetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",10, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$17 ::= 
            {
              Object RESULT =null;
System.out.println( nombre+ naves+ produccion+porcentajeMuertes+ false );Planeta planetaNuevo = new Planeta(nombre, naves, produccion,porcentajeMuertes, false); Parser.planetas.add(planetaNuevo);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$17",35, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpoPlanetasJason ::= COMA cuerpoPlanetasJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",10, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpoPlanetasJason ::= PORMUERTESid DOSPUNTOS NUMMUERTES NT$16 cuerpoPlanetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int porMuertesleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int porMuertesright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object porMuertes = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",10, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$16 ::= 
            {
              Object RESULT =null;
		int porMuertesleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int porMuertesright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object porMuertes = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
porcentajeMuertes =  Float.parseFloat(porMuertes.toString());
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$16",34, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpoPlanetasJason ::= PRODUCCIONid DOSPUNTOS ENTERO NT$15 cuerpoPlanetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int produccion1left = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int produccion1right = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object produccion1 = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",10, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$15 ::= 
            {
              Object RESULT =null;
		int produccion1left = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int produccion1right = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object produccion1 = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
produccion = Integer.parseInt( produccion1.toString()); 
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$15",33, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpoPlanetasJason ::= NAVESid DOSPUNTOS ENTERO NT$14 cuerpoPlanetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int numeroNavesleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int numeroNavesright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object numeroNaves = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",10, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$14 ::= 
            {
              Object RESULT =null;
		int numeroNavesleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int numeroNavesright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object numeroNaves = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
naves =Integer.parseInt( numeroNaves.toString()); 
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$14",32, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpoPlanetasJason ::= NOMBREid DOSPUNTOS COMILLA ID NT$13 COMILLA cuerpoPlanetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;
		int nombreMiPlanetaleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).left;
		int nombreMiPlanetaright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).right;
		Object nombreMiPlaneta = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-3)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",10, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-6)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$13 ::= 
            {
              Object RESULT =null;
		int nombreMiPlanetaleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int nombreMiPlanetaright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object nombreMiPlaneta = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
nombre = nombreMiPlaneta.toString();
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$13",31, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // planetasJason ::= COMA planetasJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("planetasJason",11, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // planetasJason ::= ABRECORCHETE cuerpoPlanetasJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("planetasJason",11, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // planetasNeutralesJason ::= COMA planetasNeutralesJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("planetasNeutralesJason",7, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // planetasNeutralesJason ::= ABRECORCHETE cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("planetasNeutralesJason",7, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpoNeutrales ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",6, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpoNeutrales ::= COMA cuerpoNeutrales 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",6, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpoNeutrales ::= PRODUCCIONid DOSPUNTOS ENTERO NT$12 cuerpoNeutrales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int numProduccionleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int numProduccionright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object numProduccion = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",6, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$12 ::= 
            {
              Object RESULT =null;
		int numProduccionleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int numProduccionright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object numProduccion = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
planetaNeutral.setProduccion(Integer.parseInt(numProduccion.toString()));
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$12",30, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpoNeutrales ::= MOSTRARESTADISTICASid DOSPUNTOS booleano NT$11 cuerpoNeutrales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",6, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$11 ::= 
            {
              Object RESULT =null;
planetaNeutral.setMostrarEstadisticas(miboolean);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$11",29, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cuerpoNeutrales ::= MOSTRARNAVESid DOSPUNTOS booleano NT$10 cuerpoNeutrales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",6, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$10 ::= 
            {
              Object RESULT =null;
System.out.println( miboolean); planetaNeutral.setMostrarNaves(miboolean);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$10",28, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cuerpoTamañoId ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoTamañoId",3, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cuerpoTamañoId ::= COMA cuerpoTamañoId 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoTamañoId",3, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpoTamañoId ::= COLUMNASid DOSPUNTOS ENTERO NT$9 cuerpoTamañoId 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int columnasleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int columnasright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object columnas = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoTamañoId",3, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT =null;
		int columnasleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int columnasright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object columnas = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
tamMapa[1]=  Integer.parseInt(columnas.toString());
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpoTamañoId ::= FILASid DOSPUNTOS ENTERO NT$8 cuerpoTamañoId 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int filasleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int filasright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object filas = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoTamañoId",3, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$8 ::= 
            {
              Object RESULT =null;
		int filasleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int filasright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object filas = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
tamMapa[0]= Integer.parseInt(filas.toString());
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mapaJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mapaJason ::= COMA mapaJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mapaJason ::= FINALIZACIONid DOSPUNTOS ENTERO NT$7 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int numFinalizacionleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int numFinalizacionright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object numFinalizacion = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$7 ::= 
            {
              Object RESULT =null;
		int numFinalizacionleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int numFinalizacionright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object numFinalizacion = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
Parser.mapa.setFinalizacion(Integer.parseInt(numFinalizacion.toString()));
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // mapaJason ::= NEUTRALES DOSPUNTOS ABRECORCHETE cuerpoNeutrales NT$6 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-5)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$6 ::= 
            {
              Object RESULT =null;
Parser.mapa.setPlanetasNeutrales(planetaNeutral);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mapaJason ::= ACUMULARid DOSPUNTOS booleano NT$5 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int isAcumularleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int isAcumularright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object isAcumular = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
		int isAcumularleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int isAcumularright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object isAcumular = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
Parser.mapa.setAcumular(miboolean);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // mapaJason ::= MAPACIEGOid DOSPUNTOS booleano NT$4 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =null;
Parser.mapa.setMapaCiego(miboolean);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mapaJason ::= PLANETASNEUTRALESid DOSPUNTOS ENTERO NT$3 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		int numPlanetasNeutrosleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).left;
		int numPlanetasNeutrosright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-2)).right;
		Object numPlanetasNeutros = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;
		int numPlanetasNeutrosleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int numPlanetasNeutrosright = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object numPlanetasNeutros = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
Parser.mapa.setNumeroPlanetasNeutrales(Integer.parseInt(numPlanetasNeutros.toString()));
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mapaJason ::= ALAZARid DOSPUNTOS booleano NT$2 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println( miboolean);Parser.mapa.setAlAzar(miboolean);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mapaJason ::= TAMAÑOid DOSPUNTOS ABRECORCHETE cuerpoTamañoId NT$1 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-5)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
Parser.mapa.setTamaño(tamMapa);
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mapaJason ::= IDid DOSPUNTOS COMILLA ID NT$0 COMILLA mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-2)).value;
		int idMapaleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).left;
		int idMaparight = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-3)).right;
		Object idMapa = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-3)).value;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("mapaJason",5, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-6)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int idMapaleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).left;
		int idMaparight = ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()).right;
		Object idMapa = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.peek()).value;
Parser.mapa.setIdMapa(idMapa.toString());
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpoJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJason",4, ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpoJason ::= COMA cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJason",4, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpoJason ::= JUGADORES DOSPUNTOS CORCHETEABRE jugadoresJason CORCHETECIERRA cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJason",4, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-5)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpoJason ::= PLANETAS DOSPUNTOS CORCHETEABRE planetasJason CORCHETECIERRA cuerpoJason 
            {
              Object RESULT =null;
		System.out.println( "222OOOOOOOOOO" );
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJason",4, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-5)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpoJason ::= PLANETASNEUTRALES DOSPUNTOS CORCHETEABRE planetasNeutralesJason CORCHETECIERRA cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJason",4, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-5)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpoJason ::= MAPA DOSPUNTOS ABRECORCHETE mapaJason cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("cuerpoJason",4, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-4)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= ABRECORCHETE cuerpoJsonGuardaProy 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ABRECORCHETE cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parse$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          return CUP$Parse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parse$stack.elementAt(CUP$Parse$top-1)).value;
		RESULT = start_val;
              CUP$Parse$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parse$stack.elementAt(CUP$Parse$top-1)), ((java_cup.runtime.Symbol)CUP$Parse$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parse$parser.done_parsing();
          return CUP$Parse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

