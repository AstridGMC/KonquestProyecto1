/* The following code was generated by JFlex 1.6.1 */

package Backend.FlexYCup;
import java_cup.runtime.* ;
import java_cup.runtime.Symbol;
import Backend.FlexYCup.sym;
import java.util.ArrayList;

/*--------------2 Declaraciones ------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico.jflex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 53, 53, 55, 55, 53,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    54,  0,  3,  0,  4,  0,  2,  0,  0,  0,  0,  0, 50,  0, 52,  0, 
    51,  1,  1,  1,  1,  1,  1,  1,  1,  1, 49,  0,  0,  0,  0,  0, 
     0,  7,  2,  8, 11, 21,  6, 19, 12,  9, 18,  2, 10, 14, 15, 16, 
    17,  2, 20, 22, 23, 13,  2,  2,  2,  2,  2, 46,  0, 45,  0,  5, 
     0, 29, 34, 37, 41, 31, 43, 44,  2, 25, 38,  2, 28, 33, 30, 27, 
    26,  2, 35, 32, 24, 39, 36,  2,  2,  2, 40, 47,  2, 48,  0,  0, 
     0,  0,  0,  0,  0, 55,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\20\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\2\1\13\1\14\1\15"+
    "\14\0\13\15\1\16\14\15\23\0\31\15\1\17\6\0"+
    "\1\16\14\0\4\15\1\20\3\15\1\21\1\22\16\15"+
    "\22\0\1\23\1\24\14\15\1\25\3\15\1\26\1\15"+
    "\1\20\3\0\1\22\15\0\1\15\1\27\3\15\1\30"+
    "\3\15\1\31\1\15\1\32\4\15\12\0\1\25\3\0"+
    "\1\26\1\0\1\33\13\15\3\0\1\30\3\0\1\31"+
    "\1\0\1\32\4\0\1\15\1\34\2\15\1\35\1\15"+
    "\1\36\3\15\1\37\1\15\14\0\1\40\1\15\1\41"+
    "\5\15\1\42\1\15\1\0\1\34\3\0\1\35\2\0"+
    "\1\36\3\0\1\37\1\0\3\15\1\43\3\15\1\40"+
    "\1\0\1\41\5\0\1\42\1\0\6\15\3\0\1\43"+
    "\3\0\3\15\1\44\1\15\1\45\6\0\4\15\3\0"+
    "\1\44\1\0\1\45\4\15\4\0\4\15\4\0\4\15"+
    "\4\0\1\15\1\46\1\47\1\15\4\0\1\50\1\15"+
    "\1\0\1\46\1\47\1\0\1\51\1\50\1\0\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0498\0\u04d0\0\u0508\0\250\0\u0540"+
    "\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700"+
    "\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\250\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u0ce8"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\70\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\250"+
    "\0\u1b58\0\u1b90\0\u1bc8\0\250\0\250\0\u1c00\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\250\0\250\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0"+
    "\0\u24f8\0\u2530\0\u2568\0\250\0\u25a0\0\u25d8\0\u2610\0\250"+
    "\0\u2648\0\70\0\u2680\0\u26b8\0\u26f0\0\70\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920"+
    "\0\u2958\0\u2990\0\u29c8\0\u2a00\0\250\0\u2a38\0\u2a70\0\u2aa8"+
    "\0\250\0\u2ae0\0\u2b18\0\u2b50\0\250\0\u2b88\0\250\0\u2bc0"+
    "\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\70\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\70\0\u2f78\0\250\0\u2fb0\0\u2fe8\0\u3020\0\u3058"+
    "\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218"+
    "\0\u3250\0\u3288\0\70\0\u32c0\0\u32f8\0\u3330\0\70\0\u3368"+
    "\0\70\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0"+
    "\0\u3528\0\u3560\0\u3598\0\250\0\u35d0\0\u3608\0\u3640\0\250"+
    "\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800"+
    "\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\250\0\u3950\0\250"+
    "\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\250\0\u3aa0\0\u3ad8"+
    "\0\70\0\u3b10\0\u3b48\0\u3b80\0\70\0\u3bb8\0\u3bf0\0\70"+
    "\0\u3c28\0\u3c60\0\u3c98\0\70\0\u3cd0\0\u3d08\0\u3d40\0\u3d78"+
    "\0\250\0\u3db0\0\u3de8\0\u3e20\0\70\0\u3e58\0\70\0\u3e90"+
    "\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\70\0\u3fa8\0\u3fe0\0\u4018"+
    "\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\70"+
    "\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\250\0\u4328"+
    "\0\250\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0"+
    "\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\70\0\u4638"+
    "\0\70\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0"+
    "\0\u47f8\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980"+
    "\0\u49b8\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40"+
    "\0\u4b78\0\u4bb0\0\250\0\250\0\u4be8\0\u4c20\0\u4c58\0\u4c90"+
    "\0\u4cc8\0\250\0\u4d00\0\u4d38\0\70\0\70\0\u4d70\0\250"+
    "\0\70\0\u4da8\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\4\1\6\4\4"+
    "\1\7\1\10\1\4\1\11\1\12\1\4\1\13\1\14"+
    "\4\4\1\15\1\16\1\17\1\20\2\4\1\21\1\22"+
    "\2\4\1\23\3\4\1\24\5\4\1\25\1\4\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\2\1\35"+
    "\1\36\72\0\1\3\61\0\1\3\5\0\2\37\1\0"+
    "\51\37\6\0\1\37\22\0\1\40\1\41\1\0\1\42"+
    "\1\43\5\0\1\44\1\45\1\46\2\0\1\47\1\50"+
    "\2\0\1\51\3\0\1\52\5\0\1\53\15\0\2\37"+
    "\1\0\3\37\1\54\45\37\6\0\1\37\5\0\2\37"+
    "\1\0\5\37\1\55\43\37\6\0\1\37\5\0\2\37"+
    "\1\0\11\37\1\56\37\37\6\0\1\37\5\0\2\37"+
    "\1\0\3\37\1\57\45\37\6\0\1\37\5\0\2\37"+
    "\1\0\21\37\1\60\27\37\6\0\1\37\5\0\2\37"+
    "\1\0\6\37\1\61\42\37\6\0\1\37\5\0\2\37"+
    "\1\0\11\37\1\62\37\37\6\0\1\37\5\0\2\37"+
    "\1\0\20\37\1\63\30\37\6\0\1\37\5\0\2\37"+
    "\1\0\25\37\1\64\3\37\1\65\5\37\1\66\11\37"+
    "\6\0\1\37\5\0\2\37\1\0\45\37\1\67\3\37"+
    "\6\0\1\37\5\0\2\37\1\0\27\37\1\70\1\71"+
    "\6\37\1\72\11\37\6\0\1\37\5\0\2\37\1\0"+
    "\30\37\1\73\10\37\1\74\7\37\6\0\1\37\5\0"+
    "\2\37\1\0\27\37\1\75\1\37\1\76\17\37\6\0"+
    "\1\37\5\0\2\37\1\0\27\37\1\77\1\37\1\100"+
    "\17\37\6\0\1\37\5\0\2\37\1\0\27\37\1\101"+
    "\21\37\6\0\1\37\5\0\2\37\1\0\25\37\1\102"+
    "\3\37\1\103\17\37\6\0\1\37\5\0\1\3\61\0"+
    "\1\3\1\104\70\0\1\35\70\0\1\36\10\0\1\105"+
    "\105\0\1\106\54\0\1\107\72\0\1\110\103\0\1\111"+
    "\3\0\1\112\103\0\1\113\51\0\1\114\1\115\6\0"+
    "\1\116\60\0\1\117\10\0\1\120\55\0\1\121\1\0"+
    "\1\122\65\0\1\123\1\0\1\124\65\0\1\125\65\0"+
    "\1\126\37\0\2\37\1\0\4\37\1\127\1\37\1\130"+
    "\42\37\6\0\1\37\5\0\2\37\1\0\2\37\1\131"+
    "\46\37\6\0\1\37\5\0\2\37\1\0\12\37\1\132"+
    "\36\37\6\0\1\37\5\0\2\37\1\0\15\37\1\133"+
    "\33\37\6\0\1\37\5\0\2\37\1\0\11\37\1\134"+
    "\37\37\6\0\1\37\5\0\2\37\1\0\3\37\1\135"+
    "\45\37\6\0\1\37\5\0\2\37\1\0\17\37\1\136"+
    "\31\37\6\0\1\37\5\0\2\37\1\0\11\37\1\137"+
    "\37\37\6\0\1\37\5\0\2\37\1\0\26\37\1\140"+
    "\22\37\6\0\1\37\5\0\2\37\1\0\35\37\1\141"+
    "\13\37\6\0\1\37\5\0\2\37\1\0\43\37\1\142"+
    "\5\37\6\0\1\37\5\0\2\37\1\0\37\37\1\143"+
    "\11\37\6\0\1\37\5\0\2\37\1\0\31\37\1\144"+
    "\17\37\6\0\1\37\5\0\2\37\1\0\27\37\1\145"+
    "\21\37\6\0\1\37\5\0\2\37\1\0\3\37\1\146"+
    "\45\37\6\0\1\37\5\0\2\37\1\0\43\37\1\147"+
    "\5\37\6\0\1\37\5\0\2\37\1\0\35\37\1\150"+
    "\13\37\6\0\1\37\5\0\2\37\1\0\40\37\1\151"+
    "\10\37\6\0\1\37\5\0\2\37\1\0\34\37\1\152"+
    "\14\37\6\0\1\37\5\0\2\37\1\0\26\37\1\153"+
    "\22\37\6\0\1\37\5\0\2\37\1\0\30\37\1\154"+
    "\20\37\6\0\1\37\5\0\2\37\1\0\30\37\1\155"+
    "\1\37\1\156\16\37\6\0\1\37\5\0\2\37\1\0"+
    "\30\37\1\157\20\37\6\0\1\37\5\0\1\160\61\0"+
    "\1\160\25\0\1\161\63\0\1\162\61\0\1\163\103\0"+
    "\1\164\76\0\1\165\76\0\1\166\31\0\1\167\127\0"+
    "\1\170\61\0\1\171\65\0\1\172\43\0\1\173\127\0"+
    "\1\174\61\0\1\175\72\0\1\176\63\0\1\177\61\0"+
    "\1\200\71\0\1\201\67\0\1\202\1\0\1\203\32\0"+
    "\2\37\1\0\5\37\1\204\43\37\6\0\1\37\5\0"+
    "\2\37\1\0\22\37\1\205\26\37\6\0\1\37\5\0"+
    "\2\37\1\0\5\37\1\206\43\37\6\0\1\37\5\0"+
    "\2\37\1\0\3\37\1\207\45\37\6\0\1\37\5\0"+
    "\2\37\1\0\3\37\1\210\45\37\6\0\1\37\5\0"+
    "\2\37\1\0\23\37\1\211\25\37\6\0\1\37\5\0"+
    "\2\37\1\0\13\37\1\212\35\37\6\0\1\37\5\0"+
    "\2\37\1\0\3\37\1\213\45\37\6\0\1\37\5\0"+
    "\2\37\1\0\21\37\1\214\27\37\6\0\1\37\5\0"+
    "\2\37\1\0\27\37\1\215\21\37\6\0\1\37\5\0"+
    "\2\37\1\0\31\37\1\216\17\37\6\0\1\37\5\0"+
    "\2\37\1\0\33\37\1\214\15\37\6\0\1\37\5\0"+
    "\2\37\1\0\41\37\1\217\7\37\6\0\1\37\5\0"+
    "\2\37\1\0\32\37\1\220\16\37\6\0\1\37\5\0"+
    "\2\37\1\0\45\37\1\221\3\37\6\0\1\37\5\0"+
    "\2\37\1\0\44\37\1\222\4\37\6\0\1\37\5\0"+
    "\2\37\1\0\35\37\1\223\13\37\6\0\1\37\5\0"+
    "\2\37\1\0\36\37\1\224\12\37\6\0\1\37\5\0"+
    "\2\37\1\0\33\37\1\225\15\37\6\0\1\37\5\0"+
    "\2\37\1\0\24\37\1\226\24\37\6\0\1\37\5\0"+
    "\2\37\1\0\31\37\1\227\17\37\6\0\1\37\5\0"+
    "\2\37\1\0\43\37\1\230\5\37\6\0\1\37\5\0"+
    "\2\37\1\0\31\37\1\231\17\37\6\0\1\37\5\0"+
    "\2\37\1\0\31\37\1\232\17\37\6\0\1\37\5\0"+
    "\2\37\1\0\34\37\1\233\14\37\6\0\1\37\13\0"+
    "\1\234\107\0\1\235\57\0\1\236\57\0\1\237\113\0"+
    "\1\240\71\0\1\241\77\0\1\242\60\0\1\243\102\0"+
    "\1\244\66\0\1\245\60\0\1\246\70\0\1\247\64\0"+
    "\1\250\60\0\1\251\74\0\1\252\101\0\1\253\55\0"+
    "\1\254\67\0\1\255\33\0\2\37\1\0\6\37\1\256"+
    "\42\37\6\0\1\37\5\0\2\37\1\0\21\37\1\257"+
    "\27\37\6\0\1\37\5\0\2\37\1\0\4\37\1\260"+
    "\44\37\6\0\1\37\5\0\2\37\1\0\13\37\1\261"+
    "\35\37\6\0\1\37\5\0\2\37\1\0\20\37\1\262"+
    "\30\37\6\0\1\37\5\0\2\37\1\0\21\37\1\263"+
    "\27\37\6\0\1\37\5\0\2\37\1\0\7\37\1\264"+
    "\41\37\6\0\1\37\5\0\2\37\1\0\46\37\1\265"+
    "\2\37\6\0\1\37\5\0\2\37\1\0\33\37\1\266"+
    "\15\37\6\0\1\37\5\0\2\37\1\0\33\37\1\267"+
    "\15\37\6\0\1\37\5\0\2\37\1\0\43\37\1\270"+
    "\5\37\6\0\1\37\5\0\2\37\1\0\31\37\1\271"+
    "\17\37\6\0\1\37\5\0\2\37\1\0\43\37\1\272"+
    "\5\37\6\0\1\37\5\0\2\37\1\0\37\37\1\273"+
    "\11\37\6\0\1\37\5\0\2\37\1\0\34\37\1\274"+
    "\14\37\6\0\1\37\5\0\2\37\1\0\37\37\1\275"+
    "\11\37\6\0\1\37\5\0\2\37\1\0\4\37\1\276"+
    "\44\37\6\0\1\37\5\0\2\37\1\0\35\37\1\277"+
    "\13\37\6\0\1\37\5\0\2\37\1\0\34\37\1\300"+
    "\14\37\6\0\1\37\5\0\2\37\1\0\30\37\1\301"+
    "\20\37\6\0\1\37\5\0\2\37\1\0\33\37\1\257"+
    "\15\37\6\0\1\37\7\0\1\302\110\0\1\303\70\0"+
    "\1\304\55\0\1\305\57\0\1\306\136\0\1\307\54\0"+
    "\1\310\67\0\1\311\77\0\1\312\55\0\1\313\101\0"+
    "\1\314\63\0\1\315\64\0\1\316\72\0\1\317\34\0"+
    "\1\320\120\0\1\321\66\0\1\322\63\0\1\323\34\0"+
    "\2\37\1\0\5\37\1\324\43\37\6\0\1\37\5\0"+
    "\2\37\1\0\14\37\1\325\34\37\6\0\1\37\5\0"+
    "\2\37\1\0\3\37\1\326\45\37\6\0\1\37\5\0"+
    "\2\37\1\0\23\37\1\327\25\37\6\0\1\37\5\0"+
    "\2\37\1\0\14\37\1\330\34\37\6\0\1\37\5\0"+
    "\2\37\1\0\27\37\1\331\21\37\6\0\1\37\5\0"+
    "\2\37\1\0\32\37\1\332\16\37\6\0\1\37\5\0"+
    "\2\37\1\0\24\37\1\333\24\37\6\0\1\37\5\0"+
    "\2\37\1\0\41\37\1\334\7\37\6\0\1\37\5\0"+
    "\2\37\1\0\37\37\1\335\11\37\6\0\1\37\5\0"+
    "\2\37\1\0\30\37\1\336\20\37\6\0\1\37\5\0"+
    "\2\37\1\0\33\37\1\337\15\37\6\0\1\37\5\0"+
    "\2\37\1\0\31\37\1\340\17\37\6\0\1\37\5\0"+
    "\2\37\1\0\25\37\1\341\23\37\6\0\1\37\5\0"+
    "\2\37\1\0\32\37\1\342\16\37\6\0\1\37\5\0"+
    "\2\37\1\0\25\37\1\343\23\37\6\0\1\37\13\0"+
    "\1\344\107\0\1\345\60\0\1\346\102\0\1\347\72\0"+
    "\1\350\61\0\1\351\104\0\1\352\65\0\1\353\60\0"+
    "\1\354\72\0\1\355\33\0\1\356\121\0\1\357\63\0"+
    "\1\360\74\0\1\361\34\0\1\362\115\0\1\363\37\0"+
    "\2\37\1\0\6\37\1\364\42\37\6\0\1\37\5\0"+
    "\2\37\1\0\6\37\1\365\42\37\6\0\1\37\5\0"+
    "\2\37\1\0\3\37\1\366\45\37\6\0\1\37\5\0"+
    "\2\37\1\0\20\37\1\367\30\37\6\0\1\37\5\0"+
    "\2\37\1\0\24\37\1\370\24\37\6\0\1\37\5\0"+
    "\2\37\1\0\31\37\1\371\17\37\6\0\1\37\5\0"+
    "\2\37\1\0\41\37\1\372\7\37\6\0\1\37\5\0"+
    "\2\37\1\0\31\37\1\373\17\37\6\0\1\37\5\0"+
    "\2\37\1\0\37\37\1\374\11\37\6\0\1\37\5\0"+
    "\2\37\1\0\33\37\1\375\15\37\6\0\1\37\5\0"+
    "\2\37\1\0\31\37\1\376\17\37\6\0\1\37\5\0"+
    "\2\37\1\0\44\37\1\377\4\37\6\0\1\37\16\0"+
    "\1\u0100\64\0\1\u0101\104\0\1\u0102\46\0\1\u0103\114\0"+
    "\1\u0104\74\0\1\u0105\77\0\1\u0106\25\0\1\u0107\121\0"+
    "\1\u0108\35\0\1\u0109\127\0\1\u010a\63\0\1\u010b\65\0"+
    "\1\u010c\102\0\1\u010d\20\0\2\37\1\0\21\37\1\u010e"+
    "\27\37\6\0\1\37\5\0\2\37\1\0\22\37\1\u010f"+
    "\26\37\6\0\1\37\5\0\2\37\1\0\21\37\1\u0110"+
    "\27\37\6\0\1\37\5\0\2\37\1\0\31\37\1\u0111"+
    "\17\37\6\0\1\37\5\0\2\37\1\0\34\37\1\u0112"+
    "\14\37\6\0\1\37\5\0\2\37\1\0\25\37\1\u0113"+
    "\23\37\6\0\1\37\5\0\2\37\1\0\37\37\1\u0114"+
    "\11\37\6\0\1\37\5\0\2\37\1\0\13\37\1\u0115"+
    "\5\37\1\u0116\27\37\6\0\1\37\5\0\2\37\1\0"+
    "\50\37\1\u0117\6\0\1\37\5\0\2\37\1\0\34\37"+
    "\1\u0118\14\37\6\0\1\37\5\0\2\37\1\0\31\37"+
    "\1\u0119\17\37\6\0\1\37\31\0\1\u011a\70\0\1\u011b"+
    "\66\0\1\u011c\77\0\1\u011d\72\0\1\u011e\60\0\1\u011f"+
    "\101\0\1\u0120\43\0\1\u0121\5\0\1\u0122\116\0\1\u0123"+
    "\53\0\1\u0124\64\0\1\u0125\33\0\2\37\1\0\22\37"+
    "\1\u0126\26\37\6\0\1\37\5\0\2\37\1\0\1\37"+
    "\1\u0127\47\37\6\0\1\37\5\0\2\37\1\0\22\37"+
    "\1\u0128\26\37\6\0\1\37\5\0\2\37\1\0\42\37"+
    "\1\u0129\6\37\6\0\1\37\5\0\2\37\1\0\13\37"+
    "\1\u012a\35\37\6\0\1\37\5\0\2\37\1\0\27\37"+
    "\1\u012b\21\37\6\0\1\37\5\0\2\37\1\0\31\37"+
    "\1\u012c\17\37\6\0\1\37\5\0\2\37\1\0\34\37"+
    "\1\u012d\14\37\6\0\1\37\5\0\2\37\1\0\27\37"+
    "\1\u012e\21\37\6\0\1\37\5\0\2\37\1\0\41\37"+
    "\1\u012f\7\37\6\0\1\37\32\0\1\u0130\44\0\1\u0131"+
    "\1\0\1\u0132\110\0\1\u0133\107\0\1\u0134\24\0\1\u0135"+
    "\13\0\1\u0136\103\0\1\u0137\37\0\1\u0138\121\0\1\u0139"+
    "\72\0\1\u013a\62\0\1\u013b\37\0\1\u013c\131\0\1\u013d"+
    "\23\0\2\37\1\0\13\37\1\u013e\35\37\6\0\1\37"+
    "\5\0\2\37\1\0\33\37\1\u013f\15\37\6\0\1\37"+
    "\5\0\2\37\1\0\33\37\1\u0140\15\37\6\0\1\37"+
    "\5\0\2\37\1\0\32\37\1\u0141\16\37\6\0\1\37"+
    "\5\0\2\37\1\0\40\37\1\u0142\10\37\6\0\1\37"+
    "\5\0\2\37\1\0\24\37\1\u0143\24\37\6\0\1\37"+
    "\5\0\2\37\1\0\25\37\1\u0144\23\37\6\0\1\37"+
    "\7\0\1\u0145\103\0\1\u0146\53\0\1\u0147\123\0\1\u0148"+
    "\67\0\1\u0149\66\0\1\u014a\75\0\1\u014b\53\0\1\u014c"+
    "\42\0\1\u014d\115\0\1\u014e\37\0\2\37\1\0\21\37"+
    "\1\u014f\27\37\6\0\1\37\5\0\2\37\1\0\12\37"+
    "\1\u0150\36\37\6\0\1\37\5\0\2\37\1\0\43\37"+
    "\1\u0151\5\37\6\0\1\37\5\0\2\37\1\0\33\37"+
    "\1\u0152\15\37\6\0\1\37\5\0\2\37\1\0\31\37"+
    "\1\u0153\17\37\6\0\1\37\5\0\2\37\1\0\27\37"+
    "\1\u0154\21\37\6\0\1\37\31\0\1\u0155\60\0\1\u0156"+
    "\120\0\1\u0157\23\0\1\u0158\123\0\1\u0159\65\0\1\u015a"+
    "\65\0\1\u015b\35\0\2\37\1\0\11\37\1\u015c\37\37"+
    "\6\0\1\37\5\0\2\37\1\0\43\37\1\u015d\5\37"+
    "\6\0\1\37\5\0\2\37\1\0\24\37\1\u015e\24\37"+
    "\6\0\1\37\5\0\2\37\1\0\34\37\1\u015f\14\37"+
    "\6\0\1\37\5\0\2\37\1\0\45\37\1\u0160\3\37"+
    "\6\0\1\37\5\0\2\37\1\0\32\37\1\u0161\16\37"+
    "\6\0\1\37\21\0\1\u0162\121\0\1\u0163\50\0\1\u0164"+
    "\77\0\1\u0165\100\0\1\u0166\54\0\1\u0167\32\0\2\37"+
    "\1\0\23\37\1\u0168\25\37\6\0\1\37\5\0\2\37"+
    "\1\0\33\37\1\u0169\15\37\6\0\1\37\5\0\2\37"+
    "\1\0\37\37\1\u016a\11\37\6\0\1\37\5\0\2\37"+
    "\1\0\25\37\1\u016b\23\37\6\0\1\37\33\0\1\u016c"+
    "\77\0\1\u016d\73\0\1\u016e\27\0\1\u016f\115\0\1\u0170"+
    "\41\0\1\u0171\65\0\2\37\1\0\20\37\1\u0172\30\37"+
    "\6\0\1\37\5\0\2\37\1\0\37\37\1\u0173\11\37"+
    "\6\0\1\37\5\0\2\37\1\0\31\37\1\u0174\17\37"+
    "\6\0\1\37\5\0\2\37\1\0\34\37\1\u0175\14\37"+
    "\6\0\1\37\30\0\1\u0176\106\0\1\u0177\61\0\1\u0178"+
    "\72\0\1\u0179\30\0\2\37\1\0\3\37\1\u017a\45\37"+
    "\6\0\1\37\5\0\2\37\1\0\24\37\1\u017b\24\37"+
    "\6\0\1\37\5\0\2\37\1\0\30\37\1\u017c\20\37"+
    "\6\0\1\37\5\0\2\37\1\0\24\37\1\u017d\24\37"+
    "\6\0\1\37\13\0\1\u017e\110\0\1\u017f\73\0\1\u0180"+
    "\63\0\1\u0181\40\0\2\37\1\0\6\37\1\u0182\42\37"+
    "\6\0\1\37\5\0\2\37\1\0\33\37\1\u0183\15\37"+
    "\6\0\1\37\5\0\2\37\1\0\33\37\1\u0184\15\37"+
    "\6\0\1\37\5\0\2\37\1\0\25\37\1\u0185\23\37"+
    "\6\0\1\37\16\0\1\u0186\114\0\1\u0187\67\0\1\u0188"+
    "\61\0\1\u0189\37\0\2\37\1\0\21\37\1\u018a\27\37"+
    "\6\0\1\37\5\0\2\37\1\0\34\37\1\u018b\14\37"+
    "\6\0\1\37\5\0\2\37\1\0\34\37\1\u018c\14\37"+
    "\6\0\1\37\5\0\2\37\1\0\41\37\1\u018d\7\37"+
    "\6\0\1\37\31\0\1\u018e\102\0\1\u018f\67\0\1\u0190"+
    "\74\0\1\u0191\23\0\2\37\1\0\22\37\1\u0192\26\37"+
    "\6\0\1\37\5\0\2\37\1\0\31\37\1\u0193\17\37"+
    "\6\0\1\37\32\0\1\u0194\44\0\1\u0195\67\0\1\u0196"+
    "\121\0\1\u0197\33\0\2\37\1\0\34\37\1\u0198\14\37"+
    "\6\0\1\37\7\0\1\u0199\124\0\1\u019a\32\0\1\u019b"+
    "\64\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\6\11\4\1\14\0\30\1\23\0"+
    "\32\1\6\0\1\11\14\0\30\1\22\0\24\1\1\11"+
    "\3\0\1\11\15\0\20\1\12\0\1\11\3\0\1\11"+
    "\1\0\14\1\3\0\1\11\3\0\1\11\1\0\1\11"+
    "\4\0\14\1\14\0\12\1\1\0\1\11\3\0\1\11"+
    "\2\0\1\11\3\0\1\11\1\0\7\1\1\11\1\0"+
    "\1\11\5\0\1\11\1\0\6\1\3\0\1\11\3\0"+
    "\6\1\6\0\4\1\3\0\1\11\1\0\1\11\4\1"+
    "\4\0\4\1\4\0\4\1\4\0\4\1\4\0\2\1"+
    "\1\0\2\11\1\0\1\1\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private Symbol symbol(int type, Object value, int fila, int columna) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    ArrayList<String> nombrePlanetas = new ArrayList();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println( "Caracter no reconocido: "+ yytext() );
            }
          case 42: break;
          case 2: 
            { System.out.println( "40..." +  yytext());return symbol(sym.ENTERO , yytext(), yyline, yycolumn);
            }
          case 43: break;
          case 3: 
            { System.out.println( "38..." +  yytext());return symbol(sym.IDMAPA, yytext(), yyline, yycolumn);
            }
          case 44: break;
          case 4: 
            { System.out.println( "31..." +  yytext());return symbol(sym.COMILLA, yytext(), yyline, yycolumn);
            }
          case 45: break;
          case 5: 
            { System.out.println( "26... " +  yytext());return symbol(sym.CORCHETECIERRA);
            }
          case 46: break;
          case 6: 
            { System.out.println( "27...."+ yytext() ); return symbol(sym.CORCHETEABRE);
            }
          case 47: break;
          case 7: 
            { System.out.println( "28.... "+ yytext() ); return symbol(sym.ABRECORCHETE, yytext(), yyline, yycolumn);
            }
          case 48: break;
          case 8: 
            { System.out.println( "29.... "+ yytext() );return symbol(sym.CIERRACORCHETE, yytext(), yyline, yycolumn);
            }
          case 49: break;
          case 9: 
            { System.out.println( "30..." +  yytext());return symbol(sym.DOSPUNTOS, yytext(), yyline, yycolumn);
            }
          case 50: break;
          case 10: 
            { System.out.println( "32..." +  yytext());return symbol(sym.COMA, yytext(), yyline, yycolumn);
            }
          case 51: break;
          case 11: 
            { /*IGNORAR*/
            }
          case 52: break;
          case 12: 
            { System.out.println("espacio");
            }
          case 53: break;
          case 13: 
            { System.out.println( "39..." +  yytext());return symbol(sym.ID, yytext(), yyline, yycolumn);
            }
          case 54: break;
          case 14: 
            { System.out.println( "14... " +  yytext());return symbol(sym.IDid, yytext(), yyline, yycolumn);
            }
          case 55: break;
          case 15: 
            { System.out.println( "34..." +  yytext());return symbol(sym.NUMMUERTES, yytext(), yyline, yycolumn);
            }
          case 56: break;
          case 16: 
            { System.out.println( "4... " +  yytext());return symbol(sym.MAPA, yytext(), yyline, yycolumn);
            }
          case 57: break;
          case 17: 
            { System.out.println( "35..." +  yytext());return symbol(sym.TRUE, yytext(), yyline, yycolumn);
            }
          case 58: break;
          case 18: 
            { System.out.println( "8... " +  yytext());return symbol(sym.TIPOJUGADORid, yytext(), yyline, yycolumn);
            }
          case 59: break;
          case 19: 
            { System.out.println( "1... " + yytext());return symbol(sym.FACIL, yytext(), yyline, yycolumn);
            }
          case 60: break;
          case 20: 
            { System.out.println( "36..." +  yytext());return symbol(sym.FALSE, yytext(), yyline, yycolumn);
            }
          case 61: break;
          case 21: 
            { System.out.println( "11... " +  yytext());return symbol(sym.NAVESid, yytext(), yyline, yycolumn);
            }
          case 62: break;
          case 22: 
            { System.out.println( "16... " +  yytext());return symbol(sym.FILASid, yytext(), yyline, yycolumn);
            }
          case 63: break;
          case 23: 
            { System.out.println( "3... " + yytext());return symbol(sym.HUMANO, yytext(), yyline, yycolumn);
            }
          case 64: break;
          case 24: 
            { System.out.println( "15... " +  yytext());return symbol(sym.TAMAÑOid, yytext(), yyline, yycolumn);
            }
          case 65: break;
          case 25: 
            { System.out.println( "13... " +  yytext());return symbol(sym.ALAZARid, yytext(), yyline, yycolumn);
            }
          case 66: break;
          case 26: 
            { System.out.println( "10... " +  yytext());return symbol(sym.NOMBREid, yytext(), yyline, yycolumn);
            }
          case 67: break;
          case 27: 
            { System.out.println( "2..." +  yytext());return symbol(sym.DIFICIL, yytext(), yyline, yycolumn);
            }
          case 68: break;
          case 28: 
            { System.out.println( "7... " +  yytext());return symbol(sym.PLANETAS, yytext(), yyline, yycolumn);
            }
          case 69: break;
          case 29: 
            { System.out.println( "9... " +  yytext());return symbol(sym.PLANETASid, yytext(), yyline, yycolumn);
            }
          case 70: break;
          case 30: 
            { System.out.println( "20... " +  yytext());return symbol(sym.ACUMULARid, yytext(), yyline, yycolumn);
            }
          case 71: break;
          case 31: 
            { System.out.println( "17... " +  yytext());return symbol(sym.COLUMNASid, yytext(), yyline, yycolumn);
            }
          case 72: break;
          case 32: 
            { System.out.println( "21... " +  yytext());return symbol(sym.NEUTRALES, yytext(), yyline, yycolumn);
            }
          case 73: break;
          case 33: 
            { System.out.println( "5... " +  yytext());return symbol(sym.JUGADORES, yytext(), yyline, yycolumn);
            }
          case 74: break;
          case 34: 
            { System.out.println( "19... " +  yytext());return symbol(sym.MAPACIEGOid, yytext(), yyline, yycolumn);
            }
          case 75: break;
          case 35: 
            { System.out.println( "24... " +  yytext());return symbol(sym.PRODUCCIONid, yytext(), yyline, yycolumn);
            }
          case 76: break;
          case 36: 
            { System.out.println( "22... " +  yytext());return symbol(sym.MOSTRARNAVESid, yytext(), yyline, yycolumn);
            }
          case 77: break;
          case 37: 
            { System.out.println( "25... " +  yytext());return symbol(sym.FINALIZACIONid, yytext(), yyline, yycolumn);
            }
          case 78: break;
          case 38: 
            { System.out.println( "12... " +  yytext());return symbol(sym.PORMUERTESid, yytext(), yyline, yycolumn);
            }
          case 79: break;
          case 39: 
            { System.out.println( "18... " +  yytext());return symbol(sym.PLANETASNEUTRALESid, yytext(), yyline, yycolumn);
            }
          case 80: break;
          case 40: 
            { System.out.println( "6... " +  yytext());return symbol(sym.PLANETASNEUTRALES, yytext(), yyline, yycolumn);
            }
          case 81: break;
          case 41: 
            { System.out.println( "23... " +  yytext());return symbol(sym.MOSTRARESTADISTICASid, yytext(), yyline, yycolumn);
            }
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
