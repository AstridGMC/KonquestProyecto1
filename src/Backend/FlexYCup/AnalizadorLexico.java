/* The following code was generated by JFlex 1.6.1 */

package Backend.FlexYCup;
import java_cup.runtime.* ;
import java_cup.runtime.Symbol;
import Backend.FlexYCup.sym;
import java.util.ArrayList;

/*--------------2 Declaraciones ------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico.jflex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 59, 59, 61, 61, 59,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    60,  0,  5,  4,  6,  0,  8,  0,  0,  0,  4,  4, 55,  4, 57, 58, 
    56,  1,  1,  1,  1,  1,  1,  1,  1,  1, 54,  0,  0,  0,  0,  0, 
     4, 10, 48, 11, 14, 24,  9, 22, 15, 12, 21,  3, 13, 17, 18, 19, 
    20,  3, 23, 25, 26, 16, 49,  3,  3,  3,  3, 51,  0, 50,  0,  7, 
     0, 32, 37, 40, 44, 34, 46, 47,  3, 28, 41,  3, 31, 36, 33, 30, 
    29,  3, 38, 35, 27, 42, 39,  3,  3,  3, 43, 52,  2, 53,  0,  0, 
     0,  0,  0,  0,  0, 61,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 45,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\21\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\2\1\1\1\13\1\14"+
    "\1\15\16\0\20\15\1\16\14\15\31\0\36\15\1\17"+
    "\1\20\13\0\1\16\14\0\5\15\1\21\7\15\1\22"+
    "\1\23\16\15\31\0\1\24\1\25\11\15\1\26\7\15"+
    "\1\27\3\15\1\30\1\15\2\0\1\21\7\0\1\23"+
    "\15\0\1\15\1\31\7\15\1\32\3\15\1\33\1\15"+
    "\1\34\4\15\10\0\1\26\7\0\1\27\3\0\1\30"+
    "\1\0\1\35\6\15\1\36\10\15\10\0\1\32\3\0"+
    "\1\33\1\0\1\34\4\0\6\15\1\37\2\15\1\40"+
    "\1\15\1\41\3\15\1\42\1\15\11\0\1\36\11\0"+
    "\1\43\2\15\1\44\3\15\1\45\5\15\1\46\1\15"+
    "\1\20\6\0\1\37\3\0\1\40\2\0\1\41\3\0"+
    "\1\42\1\0\7\15\1\47\3\15\1\43\2\0\1\44"+
    "\3\0\1\45\5\0\1\46\1\0\1\50\11\15\7\0"+
    "\1\47\3\0\6\15\1\51\1\15\1\52\1\50\11\0"+
    "\1\53\1\15\1\54\4\15\6\0\1\51\1\0\1\52"+
    "\1\55\4\15\1\53\1\0\1\54\4\0\4\15\1\55"+
    "\4\0\4\15\4\0\1\15\1\56\1\57\1\15\4\0"+
    "\1\60\1\15\1\0\1\56\1\57\1\0\1\61\1\60"+
    "\1\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\u0554\0\u0592\0\u05d0\0\u060e"+
    "\0\272\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0"+
    "\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\272"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2"+
    "\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2"+
    "\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u1d8c\0\u1078\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\76\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416"+
    "\0\u2454\0\u2492\0\272\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\272\0\272\0\u2682\0\u26c0\0\u26fe\0\u273c"+
    "\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u29e6\0\u0592\0\u2a24\0\u2a62\0\u2aa0\0\u2ade"+
    "\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce"+
    "\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u2f3a\0\u2f78\0\272\0\272\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\272\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\272\0\u3396"+
    "\0\u33d4\0\u3412\0\272\0\u3450\0\u348e\0\u34cc\0\76\0\u350a"+
    "\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\76\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\272\0\u3a20\0\u3a5e"+
    "\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\272\0\u3bd2\0\u3c10"+
    "\0\u3c4e\0\272\0\u3c8c\0\272\0\u3cca\0\u3d08\0\u3d46\0\u3d84"+
    "\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74"+
    "\0\76\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126"+
    "\0\76\0\u4164\0\u41a2\0\u41e0\0\76\0\u421e\0\272\0\u425c"+
    "\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392\0\272\0\u43d0\0\u440e"+
    "\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe"+
    "\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\76\0\u47b0"+
    "\0\u47ee\0\u482c\0\76\0\u486a\0\76\0\u48a8\0\u48e6\0\u4924"+
    "\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14"+
    "\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\272\0\u4c4a\0\u4c88\0\u4cc6"+
    "\0\272\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78"+
    "\0\u4eb6\0\u4ef4\0\u4f32\0\76\0\u4f70\0\u4fae\0\u4fec\0\u502a"+
    "\0\u5068\0\u50a6\0\u50e4\0\u5122\0\u5160\0\272\0\u519e\0\u51dc"+
    "\0\272\0\u521a\0\u5258\0\u5296\0\272\0\u52d4\0\u5312\0\u5350"+
    "\0\u538e\0\u53cc\0\272\0\u540a\0\u5448\0\u5486\0\u54c4\0\u5502"+
    "\0\u5540\0\u557e\0\u55bc\0\76\0\u55fa\0\u5638\0\u5676\0\76"+
    "\0\u56b4\0\u56f2\0\76\0\u5730\0\u576e\0\u57ac\0\76\0\u57ea"+
    "\0\u5828\0\u5866\0\u58a4\0\u58e2\0\u5920\0\u595e\0\u599c\0\272"+
    "\0\u59da\0\u5a18\0\u5a56\0\76\0\u5a94\0\u5ad2\0\76\0\u5b10"+
    "\0\u5b4e\0\u5b8c\0\76\0\u5bca\0\u5c08\0\u5c46\0\u5c84\0\u5cc2"+
    "\0\76\0\u5d00\0\272\0\u5d3e\0\u5d7c\0\u5dba\0\u5df8\0\u5e36"+
    "\0\u5e74\0\u5eb2\0\u5ef0\0\u5f2e\0\u5f6c\0\u5faa\0\u5fe8\0\u6026"+
    "\0\u6064\0\u60a2\0\u60e0\0\76\0\u611e\0\u615c\0\u619a\0\u61d8"+
    "\0\u6216\0\u6254\0\u6292\0\u62d0\0\u630e\0\272\0\u634c\0\272"+
    "\0\76\0\u638a\0\u63c8\0\u6406\0\u6444\0\u6482\0\u64c0\0\u64fe"+
    "\0\u653c\0\u657a\0\272\0\u65b8\0\272\0\u65f6\0\u6634\0\u6672"+
    "\0\u66b0\0\u66ee\0\u672c\0\u676a\0\u67a8\0\u67e6\0\u6824\0\76"+
    "\0\u6862\0\76\0\272\0\u68a0\0\u68de\0\u691c\0\u695a\0\76"+
    "\0\u6998\0\76\0\u69d6\0\u6a14\0\u6a52\0\u6a90\0\u6ace\0\u6b0c"+
    "\0\u6b4a\0\u6b88\0\76\0\u6bc6\0\u6c04\0\u6c42\0\u6c80\0\u6cbe"+
    "\0\u6cfc\0\u6d3a\0\u6d78\0\u6db6\0\u6df4\0\u6e32\0\u6e70\0\u6eae"+
    "\0\272\0\272\0\u6eec\0\u6f2a\0\u6f68\0\u6fa6\0\u6fe4\0\272"+
    "\0\u7022\0\u7060\0\76\0\76\0\u709e\0\272\0\76\0\u70dc"+
    "\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\2\1\5\1\2\2\4\1\6"+
    "\4\4\1\7\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\4\4\1\16\1\17\1\20\1\21\2\4\1\22"+
    "\1\23\2\4\1\24\3\4\1\25\5\4\1\26\3\4"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\2"+
    "\1\36\1\37\1\40\100\0\1\3\66\0\1\3\6\0"+
    "\3\41\2\0\54\41\6\0\1\41\25\0\1\42\1\43"+
    "\1\44\1\0\1\45\1\46\4\0\1\47\1\50\1\51"+
    "\1\52\2\0\1\53\1\54\2\0\1\55\3\0\1\56"+
    "\5\0\1\57\20\0\3\41\2\0\4\41\1\60\47\41"+
    "\6\0\1\41\6\0\3\41\2\0\6\41\1\61\45\41"+
    "\6\0\1\41\6\0\3\41\2\0\12\41\1\62\41\41"+
    "\6\0\1\41\6\0\3\41\2\0\52\41\1\63\1\41"+
    "\6\0\1\41\6\0\3\41\2\0\4\41\1\64\10\41"+
    "\1\65\36\41\6\0\1\41\6\0\3\41\2\0\4\41"+
    "\1\66\15\41\1\67\31\41\6\0\1\41\6\0\3\41"+
    "\2\0\7\41\1\70\44\41\6\0\1\41\6\0\3\41"+
    "\2\0\12\41\1\71\41\41\6\0\1\41\6\0\3\41"+
    "\2\0\4\41\1\72\5\41\1\73\6\41\1\74\32\41"+
    "\6\0\1\41\6\0\3\41\2\0\26\41\1\75\3\41"+
    "\1\76\5\41\1\77\13\41\6\0\1\41\6\0\3\41"+
    "\2\0\46\41\1\100\5\41\6\0\1\41\6\0\3\41"+
    "\2\0\30\41\1\101\1\102\6\41\1\103\13\41\6\0"+
    "\1\41\6\0\3\41\2\0\31\41\1\104\10\41\1\105"+
    "\11\41\6\0\1\41\6\0\3\41\2\0\30\41\1\106"+
    "\1\41\1\107\21\41\6\0\1\41\6\0\3\41\2\0"+
    "\30\41\1\110\1\41\1\111\21\41\6\0\1\41\6\0"+
    "\3\41\2\0\30\41\1\112\23\41\6\0\1\41\6\0"+
    "\3\41\2\0\26\41\1\113\3\41\1\114\21\41\6\0"+
    "\1\41\6\0\1\3\66\0\1\3\1\115\5\0\4\116"+
    "\2\0\1\116\1\0\51\116\6\0\1\116\100\0\1\37"+
    "\76\0\1\40\61\0\1\117\27\0\1\120\10\0\1\121"+
    "\64\0\1\122\15\0\1\123\62\0\1\124\100\0\1\125"+
    "\67\0\1\126\5\0\1\127\111\0\1\130\3\0\1\131"+
    "\111\0\1\132\57\0\1\133\1\134\6\0\1\135\66\0"+
    "\1\136\10\0\1\137\63\0\1\140\1\0\1\141\73\0"+
    "\1\142\1\0\1\143\73\0\1\144\73\0\1\145\42\0"+
    "\3\41\2\0\5\41\1\146\1\41\1\147\44\41\6\0"+
    "\1\41\6\0\3\41\2\0\3\41\1\150\50\41\6\0"+
    "\1\41\6\0\3\41\2\0\13\41\1\151\40\41\6\0"+
    "\1\41\6\0\3\41\2\0\6\41\1\152\45\41\6\0"+
    "\1\41\6\0\3\41\2\0\16\41\1\153\35\41\6\0"+
    "\1\41\6\0\3\41\2\0\53\41\1\154\6\0\1\41"+
    "\6\0\3\41\2\0\53\41\1\155\6\0\1\41\6\0"+
    "\3\41\2\0\12\41\1\156\41\41\6\0\1\41\6\0"+
    "\3\41\2\0\4\41\1\157\47\41\6\0\1\41\6\0"+
    "\3\41\2\0\20\41\1\160\33\41\6\0\1\41\6\0"+
    "\3\41\2\0\52\41\1\161\1\41\6\0\1\41\6\0"+
    "\3\41\2\0\21\41\1\162\32\41\6\0\1\41\6\0"+
    "\3\41\2\0\12\41\1\163\41\41\6\0\1\41\6\0"+
    "\3\41\2\0\27\41\1\164\24\41\6\0\1\41\6\0"+
    "\3\41\2\0\36\41\1\165\15\41\6\0\1\41\6\0"+
    "\3\41\2\0\44\41\1\166\7\41\6\0\1\41\6\0"+
    "\3\41\2\0\40\41\1\167\13\41\6\0\1\41\6\0"+
    "\3\41\2\0\32\41\1\170\21\41\6\0\1\41\6\0"+
    "\3\41\2\0\30\41\1\171\23\41\6\0\1\41\6\0"+
    "\3\41\2\0\4\41\1\172\47\41\6\0\1\41\6\0"+
    "\3\41\2\0\44\41\1\173\7\41\6\0\1\41\6\0"+
    "\3\41\2\0\36\41\1\174\15\41\6\0\1\41\6\0"+
    "\3\41\2\0\41\41\1\175\12\41\6\0\1\41\6\0"+
    "\3\41\2\0\35\41\1\176\16\41\6\0\1\41\6\0"+
    "\3\41\2\0\27\41\1\177\24\41\6\0\1\41\6\0"+
    "\3\41\2\0\31\41\1\200\22\41\6\0\1\41\6\0"+
    "\3\41\2\0\31\41\1\201\1\41\1\202\20\41\6\0"+
    "\1\41\6\0\3\41\2\0\31\41\1\203\22\41\6\0"+
    "\1\41\6\0\1\204\66\0\1\204\6\0\4\116\2\0"+
    "\1\116\1\0\51\116\6\0\1\116\1\0\1\205\17\0"+
    "\1\206\105\0\1\207\132\0\1\210\75\0\1\211\34\0"+
    "\1\212\67\0\1\213\111\0\1\214\127\0\1\215\44\0"+
    "\1\216\103\0\1\217\104\0\1\220\36\0\1\221\136\0"+
    "\1\222\67\0\1\223\73\0\1\224\51\0\1\225\135\0"+
    "\1\226\67\0\1\227\100\0\1\230\71\0\1\231\67\0"+
    "\1\232\77\0\1\233\75\0\1\234\1\0\1\235\35\0"+
    "\3\41\2\0\6\41\1\236\45\41\6\0\1\41\6\0"+
    "\3\41\2\0\23\41\1\237\30\41\6\0\1\41\6\0"+
    "\3\41\2\0\6\41\1\240\45\41\6\0\1\41\6\0"+
    "\3\41\2\0\4\41\1\241\47\41\6\0\1\41\6\0"+
    "\3\41\2\0\5\41\1\242\46\41\6\0\1\41\6\0"+
    "\3\41\2\0\4\41\1\243\47\41\6\0\1\41\6\0"+
    "\3\41\2\0\6\41\1\244\45\41\6\0\1\41\6\0"+
    "\3\41\2\0\22\41\1\245\31\41\6\0\1\41\6\0"+
    "\3\41\2\0\24\41\1\246\27\41\6\0\1\41\6\0"+
    "\3\41\2\0\14\41\1\247\37\41\6\0\1\41\6\0"+
    "\3\41\2\0\4\41\1\250\47\41\6\0\1\41\6\0"+
    "\3\41\2\0\7\41\1\251\44\41\6\0\1\41\6\0"+
    "\3\41\2\0\14\41\1\252\37\41\6\0\1\41\6\0"+
    "\3\41\2\0\22\41\1\253\31\41\6\0\1\41\6\0"+
    "\3\41\2\0\30\41\1\254\23\41\6\0\1\41\6\0"+
    "\3\41\2\0\32\41\1\255\21\41\6\0\1\41\6\0"+
    "\3\41\2\0\34\41\1\253\17\41\6\0\1\41\6\0"+
    "\3\41\2\0\42\41\1\256\11\41\6\0\1\41\6\0"+
    "\3\41\2\0\33\41\1\257\20\41\6\0\1\41\6\0"+
    "\3\41\2\0\46\41\1\260\5\41\6\0\1\41\6\0"+
    "\3\41\2\0\45\41\1\261\6\41\6\0\1\41\6\0"+
    "\3\41\2\0\36\41\1\262\15\41\6\0\1\41\6\0"+
    "\3\41\2\0\37\41\1\263\14\41\6\0\1\41\6\0"+
    "\3\41\2\0\34\41\1\264\17\41\6\0\1\41\6\0"+
    "\3\41\2\0\25\41\1\265\26\41\6\0\1\41\6\0"+
    "\3\41\2\0\32\41\1\266\21\41\6\0\1\41\6\0"+
    "\3\41\2\0\44\41\1\267\7\41\6\0\1\41\6\0"+
    "\3\41\2\0\32\41\1\270\21\41\6\0\1\41\6\0"+
    "\3\41\2\0\32\41\1\271\21\41\6\0\1\41\6\0"+
    "\3\41\2\0\35\41\1\272\16\41\6\0\1\41\6\0"+
    "\1\273\1\0\2\273\2\0\1\273\1\0\44\273\1\0"+
    "\4\273\6\0\1\273\1\0\1\274\16\0\1\275\74\0"+
    "\1\276\77\0\1\277\111\0\1\300\77\0\1\301\65\0"+
    "\1\302\65\0\1\303\100\0\1\304\102\0\1\305\111\0"+
    "\1\306\77\0\1\307\105\0\1\310\66\0\1\311\110\0"+
    "\1\312\74\0\1\313\66\0\1\314\76\0\1\315\72\0"+
    "\1\316\66\0\1\317\102\0\1\320\107\0\1\321\63\0"+
    "\1\322\75\0\1\323\36\0\3\41\2\0\7\41\1\324"+
    "\44\41\6\0\1\41\6\0\3\41\2\0\22\41\1\325"+
    "\31\41\6\0\1\41\6\0\3\41\2\0\5\41\1\326"+
    "\46\41\6\0\1\41\6\0\3\41\2\0\14\41\1\327"+
    "\37\41\6\0\1\41\6\0\3\41\2\0\4\41\1\330"+
    "\47\41\6\0\1\41\6\0\3\41\2\0\13\41\1\331"+
    "\40\41\6\0\1\41\6\0\3\41\2\0\23\41\1\332"+
    "\30\41\6\0\1\41\6\0\3\41\2\0\21\41\1\333"+
    "\32\41\6\0\1\41\6\0\3\41\2\0\22\41\1\334"+
    "\31\41\6\0\1\41\6\0\3\41\2\0\10\41\1\335"+
    "\43\41\6\0\1\41\6\0\3\41\2\0\22\41\1\336"+
    "\31\41\6\0\1\41\6\0\3\41\2\0\15\41\1\337"+
    "\36\41\6\0\1\41\6\0\3\41\2\0\47\41\1\340"+
    "\4\41\6\0\1\41\6\0\3\41\2\0\34\41\1\341"+
    "\17\41\6\0\1\41\6\0\3\41\2\0\34\41\1\342"+
    "\17\41\6\0\1\41\6\0\3\41\2\0\44\41\1\343"+
    "\7\41\6\0\1\41\6\0\3\41\2\0\32\41\1\344"+
    "\21\41\6\0\1\41\6\0\3\41\2\0\44\41\1\345"+
    "\7\41\6\0\1\41\6\0\3\41\2\0\40\41\1\346"+
    "\13\41\6\0\1\41\6\0\3\41\2\0\35\41\1\347"+
    "\16\41\6\0\1\41\6\0\3\41\2\0\40\41\1\350"+
    "\13\41\6\0\1\41\6\0\3\41\2\0\5\41\1\351"+
    "\46\41\6\0\1\41\6\0\3\41\2\0\36\41\1\352"+
    "\15\41\6\0\1\41\6\0\3\41\2\0\35\41\1\353"+
    "\16\41\6\0\1\41\6\0\3\41\2\0\31\41\1\354"+
    "\22\41\6\0\1\41\6\0\3\41\2\0\34\41\1\325"+
    "\17\41\6\0\1\41\6\0\1\273\1\0\2\273\2\0"+
    "\1\273\1\0\44\273\1\0\4\273\6\0\1\273\1\355"+
    "\16\0\1\356\70\0\1\357\111\0\1\360\105\0\1\361"+
    "\73\0\1\362\76\0\1\363\63\0\1\364\107\0\1\365"+
    "\70\0\1\366\57\0\1\367\145\0\1\370\62\0\1\371"+
    "\75\0\1\372\105\0\1\373\63\0\1\374\107\0\1\375"+
    "\71\0\1\376\72\0\1\377\100\0\1\u0100\42\0\1\u0101"+
    "\126\0\1\u0102\74\0\1\u0103\71\0\1\u0104\37\0\3\41"+
    "\2\0\6\41\1\u0105\45\41\6\0\1\41\6\0\3\41"+
    "\2\0\15\41\1\u0106\36\41\6\0\1\41\6\0\3\41"+
    "\2\0\5\41\1\u0107\46\41\6\0\1\41\6\0\3\41"+
    "\2\0\6\41\1\u0108\45\41\6\0\1\41\6\0\3\41"+
    "\2\0\22\41\1\u0109\31\41\6\0\1\41\6\0\3\41"+
    "\2\0\4\41\1\u010a\47\41\6\0\1\41\6\0\3\41"+
    "\2\0\24\41\1\u010b\27\41\6\0\1\41\6\0\3\41"+
    "\2\0\15\41\1\u010c\36\41\6\0\1\41\6\0\3\41"+
    "\2\0\21\41\1\u010d\32\41\6\0\1\41\6\0\3\41"+
    "\2\0\30\41\1\u010e\23\41\6\0\1\41\6\0\3\41"+
    "\2\0\33\41\1\u010f\20\41\6\0\1\41\6\0\3\41"+
    "\2\0\25\41\1\u0110\26\41\6\0\1\41\6\0\3\41"+
    "\2\0\42\41\1\u0111\11\41\6\0\1\41\6\0\3\41"+
    "\2\0\40\41\1\u0112\13\41\6\0\1\41\6\0\3\41"+
    "\2\0\31\41\1\u0113\22\41\6\0\1\41\6\0\3\41"+
    "\2\0\34\41\1\u0114\17\41\6\0\1\41\6\0\3\41"+
    "\2\0\32\41\1\u0115\21\41\6\0\1\41\6\0\3\41"+
    "\2\0\26\41\1\u0116\25\41\6\0\1\41\6\0\3\41"+
    "\2\0\33\41\1\u0117\20\41\6\0\1\41\6\0\3\41"+
    "\2\0\26\41\1\u0118\25\41\6\0\1\41\56\0\1\u0119"+
    "\37\0\1\u011a\76\0\1\u011b\111\0\1\u011c\57\0\1\u011d"+
    "\115\0\1\u011e\66\0\1\u011f\101\0\1\u0120\53\0\1\u0121"+
    "\126\0\1\u0122\100\0\1\u0123\67\0\1\u0124\112\0\1\u0125"+
    "\73\0\1\u0126\66\0\1\u0127\100\0\1\u0128\40\0\1\u0129"+
    "\130\0\1\u012a\71\0\1\u012b\102\0\1\u012c\41\0\1\u012d"+
    "\124\0\1\u012e\42\0\3\41\2\0\7\41\1\u012f\44\41"+
    "\6\0\1\41\6\0\3\41\2\0\6\41\1\u0130\45\41"+
    "\6\0\1\41\6\0\3\41\2\0\22\41\1\u0131\31\41"+
    "\6\0\1\41\6\0\3\41\2\0\14\41\1\u0132\37\41"+
    "\6\0\1\41\6\0\3\41\2\0\7\41\1\u0133\44\41"+
    "\6\0\1\41\6\0\3\41\2\0\4\41\1\u0134\47\41"+
    "\6\0\1\41\6\0\3\41\2\0\21\41\1\u0135\32\41"+
    "\6\0\1\41\6\0\3\41\2\0\15\41\1\u0136\36\41"+
    "\6\0\1\41\6\0\3\41\2\0\25\41\1\u0137\26\41"+
    "\6\0\1\41\6\0\3\41\2\0\32\41\1\u0138\21\41"+
    "\6\0\1\41\6\0\3\41\2\0\42\41\1\u0139\11\41"+
    "\6\0\1\41\6\0\3\41\2\0\32\41\1\u013a\21\41"+
    "\6\0\1\41\6\0\3\41\2\0\40\41\1\u013b\13\41"+
    "\6\0\1\41\6\0\3\41\2\0\34\41\1\u013c\17\41"+
    "\6\0\1\41\6\0\3\41\2\0\32\41\1\u013d\21\41"+
    "\6\0\1\41\6\0\3\41\2\0\45\41\1\u013e\6\41"+
    "\6\0\1\41\50\0\1\u013f\46\0\1\u0140\111\0\1\u0141"+
    "\67\0\1\u0142\70\0\1\u0143\72\0\1\u0144\112\0\1\u0145"+
    "\71\0\1\u0146\57\0\1\u0147\123\0\1\u0148\102\0\1\u0149"+
    "\105\0\1\u014a\32\0\1\u014b\130\0\1\u014c\42\0\1\u014d"+
    "\136\0\1\u014e\71\0\1\u014f\73\0\1\u0150\110\0\1\u0151"+
    "\23\0\3\41\2\0\15\41\1\u0152\36\41\6\0\1\41"+
    "\6\0\3\41\2\0\14\41\1\u0153\37\41\6\0\1\41"+
    "\6\0\3\41\2\0\53\41\1\u0154\6\0\1\41\6\0"+
    "\3\41\2\0\22\41\1\u0155\31\41\6\0\1\41\6\0"+
    "\3\41\2\0\10\41\1\u0156\4\41\1\u0157\5\41\1\u0158"+
    "\30\41\6\0\1\41\6\0\3\41\2\0\22\41\1\u0159"+
    "\31\41\6\0\1\41\6\0\3\41\2\0\32\41\1\u015a"+
    "\21\41\6\0\1\41\6\0\3\41\2\0\35\41\1\u015b"+
    "\16\41\6\0\1\41\6\0\3\41\2\0\26\41\1\u015c"+
    "\25\41\6\0\1\41\6\0\3\41\2\0\40\41\1\u015d"+
    "\13\41\6\0\1\41\6\0\3\41\2\0\14\41\1\u015e"+
    "\5\41\1\u015f\31\41\6\0\1\41\6\0\3\41\2\0"+
    "\51\41\1\u0160\2\41\6\0\1\41\6\0\3\41\2\0"+
    "\35\41\1\u0161\16\41\6\0\1\41\6\0\3\41\2\0"+
    "\32\41\1\u0162\21\41\6\0\1\41\43\0\1\u0163\62\0"+
    "\1\u0164\74\0\1\u0165\134\0\1\u0166\44\0\1\u0167\63\0"+
    "\1\u0168\4\0\1\u0169\5\0\1\u016a\74\0\1\u016b\52\0"+
    "\1\u016c\130\0\1\u016d\100\0\1\u016e\66\0\1\u016f\107\0"+
    "\1\u0170\51\0\1\u0171\5\0\1\u0172\124\0\1\u0173\61\0"+
    "\1\u0174\72\0\1\u0175\36\0\3\41\2\0\14\41\1\u0176"+
    "\37\41\6\0\1\41\6\0\3\41\2\0\24\41\1\u0177"+
    "\27\41\6\0\1\41\6\0\3\41\2\0\6\41\1\u0178"+
    "\45\41\6\0\1\41\6\0\3\41\2\0\23\41\1\u0179"+
    "\30\41\6\0\1\41\6\0\3\41\2\0\22\41\1\u017a"+
    "\31\41\6\0\1\41\6\0\3\41\2\0\21\41\1\u017b"+
    "\32\41\6\0\1\41\6\0\3\41\2\0\1\41\1\u017c"+
    "\52\41\6\0\1\41\6\0\3\41\2\0\23\41\1\u017d"+
    "\30\41\6\0\1\41\6\0\3\41\2\0\43\41\1\u017e"+
    "\10\41\6\0\1\41\6\0\3\41\2\0\14\41\1\u017f"+
    "\37\41\6\0\1\41\6\0\3\41\2\0\30\41\1\u0180"+
    "\23\41\6\0\1\41\6\0\3\41\2\0\32\41\1\u0181"+
    "\21\41\6\0\1\41\6\0\3\41\2\0\35\41\1\u0182"+
    "\16\41\6\0\1\41\6\0\3\41\2\0\30\41\1\u0183"+
    "\23\41\6\0\1\41\6\0\3\41\2\0\42\41\1\u0184"+
    "\11\41\6\0\1\41\46\0\1\u0185\56\0\1\u0186\105\0"+
    "\1\u0187\57\0\1\u0188\112\0\1\u0189\74\0\1\u018a\74\0"+
    "\1\u018b\53\0\1\u018c\1\0\1\u018d\117\0\1\u018e\115\0"+
    "\1\u018f\31\0\1\u0190\14\0\1\u0191\111\0\1\u0192\44\0"+
    "\1\u0193\130\0\1\u0194\100\0\1\u0195\70\0\1\u0196\44\0"+
    "\1\u0197\140\0\1\u0198\26\0\3\41\2\0\15\41\1\u0199"+
    "\36\41\6\0\1\41\6\0\3\41\2\0\4\41\1\u019a"+
    "\47\41\6\0\1\41\6\0\3\41\2\0\23\41\1\u019b"+
    "\30\41\6\0\1\41\6\0\3\41\2\0\6\41\1\u019c"+
    "\45\41\6\0\1\41\6\0\3\41\2\0\14\41\1\u019d"+
    "\37\41\6\0\1\41\6\0\3\41\2\0\34\41\1\u019e"+
    "\17\41\6\0\1\41\6\0\3\41\2\0\34\41\1\u019f"+
    "\17\41\6\0\1\41\6\0\3\41\2\0\33\41\1\u01a0"+
    "\20\41\6\0\1\41\6\0\3\41\2\0\41\41\1\u01a1"+
    "\12\41\6\0\1\41\6\0\3\41\2\0\25\41\1\u01a2"+
    "\26\41\6\0\1\41\6\0\3\41\2\0\26\41\1\u01a3"+
    "\25\41\6\0\1\41\6\0\1\273\1\0\2\273\2\0"+
    "\1\273\1\0\44\273\1\0\4\273\6\0\1\273\12\0"+
    "\1\u01a4\113\0\1\u01a5\64\0\1\u01a6\70\0\1\u01a7\121\0"+
    "\1\u01a8\60\0\1\u01a9\103\0\1\u01aa\60\0\1\u01ab\132\0"+
    "\1\u01ac\75\0\1\u01ad\74\0\1\u01ae\103\0\1\u01af\61\0"+
    "\1\u01b0\47\0\1\u01b1\124\0\1\u01b2\42\0\3\41\2\0"+
    "\23\41\1\u01b3\30\41\6\0\1\41\6\0\3\41\2\0"+
    "\10\41\1\u01b4\43\41\6\0\1\41\6\0\3\41\2\0"+
    "\24\41\1\u01b5\27\41\6\0\1\41\6\0\3\41\2\0"+
    "\20\41\1\u01b6\33\41\6\0\1\41\6\0\3\41\2\0"+
    "\22\41\1\u01b7\31\41\6\0\1\41\6\0\3\41\2\0"+
    "\13\41\1\u01b8\40\41\6\0\1\41\6\0\3\41\2\0"+
    "\44\41\1\u01b9\7\41\6\0\1\41\6\0\3\41\2\0"+
    "\34\41\1\u01ba\17\41\6\0\1\41\6\0\3\41\2\0"+
    "\32\41\1\u01bb\21\41\6\0\1\41\6\0\3\41\2\0"+
    "\30\41\1\u01bc\23\41\6\0\1\41\36\0\1\u01bd\62\0"+
    "\1\u01be\111\0\1\u01bf\71\0\1\u01c0\77\0\1\u01c1\66\0"+
    "\1\u01c2\126\0\1\u01c3\30\0\1\u01c4\132\0\1\u01c5\73\0"+
    "\1\u01c6\73\0\1\u01c7\40\0\3\41\2\0\4\41\1\u01c8"+
    "\47\41\6\0\1\41\6\0\3\41\2\0\6\41\1\u01c9"+
    "\45\41\6\0\1\41\6\0\3\41\2\0\22\41\1\u01ca"+
    "\31\41\6\0\1\41\6\0\3\41\2\0\12\41\1\u01cb"+
    "\41\41\6\0\1\41\6\0\3\41\2\0\44\41\1\u01cc"+
    "\7\41\6\0\1\41\6\0\3\41\2\0\25\41\1\u01cd"+
    "\26\41\6\0\1\41\6\0\3\41\2\0\35\41\1\u01ce"+
    "\16\41\6\0\1\41\6\0\3\41\2\0\46\41\1\u01cf"+
    "\5\41\6\0\1\41\6\0\3\41\2\0\33\41\1\u01d0"+
    "\20\41\6\0\1\41\12\0\1\u01d1\102\0\1\u01d2\77\0"+
    "\1\u01d3\111\0\1\u01d4\65\0\1\u01d5\127\0\1\u01d6\56\0"+
    "\1\u01d7\105\0\1\u01d8\106\0\1\u01d9\62\0\1\u01da\35\0"+
    "\3\41\2\0\23\41\1\u01db\30\41\6\0\1\41\6\0"+
    "\3\41\2\0\14\41\1\u01dc\37\41\6\0\1\41\6\0"+
    "\3\41\2\0\14\41\1\u01dd\37\41\6\0\1\41\6\0"+
    "\3\41\2\0\24\41\1\u01de\27\41\6\0\1\41\6\0"+
    "\3\41\2\0\34\41\1\u01df\17\41\6\0\1\41\6\0"+
    "\3\41\2\0\40\41\1\u01e0\13\41\6\0\1\41\6\0"+
    "\3\41\2\0\26\41\1\u01e1\25\41\6\0\1\41\36\0"+
    "\1\u01e2\66\0\1\u01e3\75\0\1\u01e4\105\0\1\u01e5\105\0"+
    "\1\u01e6\101\0\1\u01e7\34\0\1\u01e8\124\0\1\u01e9\46\0"+
    "\1\u01ea\71\0\3\41\2\0\15\41\1\u01eb\36\41\6\0"+
    "\1\41\6\0\3\41\2\0\21\41\1\u01ec\32\41\6\0"+
    "\1\41\6\0\3\41\2\0\40\41\1\u01ed\13\41\6\0"+
    "\1\41\6\0\3\41\2\0\32\41\1\u01ee\21\41\6\0"+
    "\1\41\6\0\3\41\2\0\35\41\1\u01ef\16\41\6\0"+
    "\1\41\12\0\1\u01f0\113\0\1\u01f1\57\0\1\u01f2\117\0"+
    "\1\u01f3\114\0\1\u01f4\67\0\1\u01f5\100\0\1\u01f6\33\0"+
    "\3\41\2\0\4\41\1\u01f7\47\41\6\0\1\41\6\0"+
    "\3\41\2\0\25\41\1\u01f8\26\41\6\0\1\41\6\0"+
    "\3\41\2\0\31\41\1\u01f9\22\41\6\0\1\41\6\0"+
    "\3\41\2\0\25\41\1\u01fa\26\41\6\0\1\41\12\0"+
    "\1\u01fb\102\0\1\u01fc\116\0\1\u01fd\101\0\1\u01fe\71\0"+
    "\1\u01ff\43\0\3\41\2\0\7\41\1\u0200\44\41\6\0"+
    "\1\41\6\0\3\41\2\0\34\41\1\u0201\17\41\6\0"+
    "\1\41\6\0\3\41\2\0\34\41\1\u0202\17\41\6\0"+
    "\1\41\6\0\3\41\2\0\26\41\1\u0203\25\41\6\0"+
    "\1\41\22\0\1\u0204\122\0\1\u0205\75\0\1\u0206\67\0"+
    "\1\u0207\42\0\3\41\2\0\22\41\1\u0208\31\41\6\0"+
    "\1\41\6\0\3\41\2\0\35\41\1\u0209\16\41\6\0"+
    "\1\41\6\0\3\41\2\0\35\41\1\u020a\16\41\6\0"+
    "\1\41\6\0\3\41\2\0\42\41\1\u020b\11\41\6\0"+
    "\1\41\35\0\1\u020c\110\0\1\u020d\75\0\1\u020e\102\0"+
    "\1\u020f\26\0\3\41\2\0\23\41\1\u0210\30\41\6\0"+
    "\1\41\6\0\3\41\2\0\32\41\1\u0211\21\41\6\0"+
    "\1\41\36\0\1\u0212\51\0\1\u0213\75\0\1\u0214\130\0"+
    "\1\u0215\36\0\3\41\2\0\35\41\1\u0216\16\41\6\0"+
    "\1\41\12\0\1\u0217\133\0\1\u0218\37\0\1\u0219\70\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28954];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\6\11\5\1\16\0\35\1\31\0"+
    "\40\1\13\0\1\11\14\0\35\1\31\0\31\1\2\0"+
    "\1\11\7\0\1\11\15\0\24\1\10\0\1\11\7\0"+
    "\1\11\3\0\1\11\1\0\20\1\10\0\1\11\3\0"+
    "\1\11\1\0\1\11\4\0\21\1\11\0\1\11\11\0"+
    "\20\1\6\0\1\11\3\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\13\1\1\11\2\0\1\11\3\0\1\11"+
    "\5\0\1\11\1\0\12\1\7\0\1\11\3\0\11\1"+
    "\1\11\11\0\7\1\6\0\1\11\1\0\1\11\5\1"+
    "\1\11\1\0\1\11\4\0\4\1\1\11\4\0\4\1"+
    "\4\0\4\1\4\0\2\1\1\0\2\11\1\0\1\1"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private Symbol symbol(int type, Object value, int fila, int columna) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    ArrayList<String> nombrePlanetas = new ArrayList();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println( "Caracter no reconocido: "+ yytext() );
            }
          case 50: break;
          case 2: 
            { System.out.println( "40..." +  yytext());return symbol(sym.ENTERO , yytext(), yyline, yycolumn);
            }
          case 51: break;
          case 3: 
            { System.out.println( "38..." +  yytext());return symbol(sym.IDMAPA, yytext(), yyline, yycolumn);
            }
          case 52: break;
          case 4: 
            { System.out.println( "31..." +  yytext());return symbol(sym.COMILLA, yytext(), yyline, yycolumn);
            }
          case 53: break;
          case 5: 
            { System.out.println( "26... " +  yytext());return symbol(sym.CORCHETECIERRA);
            }
          case 54: break;
          case 6: 
            { System.out.println( "27...."+ yytext() ); return symbol(sym.CORCHETEABRE);
            }
          case 55: break;
          case 7: 
            { System.out.println( "28.... "+ yytext() ); return symbol(sym.ABRECORCHETE, yytext(), yyline, yycolumn);
            }
          case 56: break;
          case 8: 
            { System.out.println( "29.... "+ yytext() );return symbol(sym.CIERRACORCHETE, yytext(), yyline, yycolumn);
            }
          case 57: break;
          case 9: 
            { System.out.println( "30..." +  yytext());return symbol(sym.DOSPUNTOS, yytext(), yyline, yycolumn);
            }
          case 58: break;
          case 10: 
            { System.out.println( "32..." +  yytext());return symbol(sym.COMA, yytext(), yyline, yycolumn);
            }
          case 59: break;
          case 11: 
            { /*IGNORAR*/
            }
          case 60: break;
          case 12: 
            { System.out.println("espacio");
            }
          case 61: break;
          case 13: 
            { System.out.println( "39..." +  yytext());return symbol(sym.ID, yytext(), yyline, yycolumn);
            }
          case 62: break;
          case 14: 
            { System.out.println( "14... " +  yytext());return symbol(sym.IDid, yytext(), yyline, yycolumn);
            }
          case 63: break;
          case 15: 
            { System.out.println( "34..." +  yytext());return symbol(sym.NUMMUERTES, yytext(), yyline, yycolumn);
            }
          case 64: break;
          case 16: 
            { System.out.println("path"); return symbol(sym.PATH,new String(yytext()), yyline, yycolumn);
            }
          case 65: break;
          case 17: 
            { System.out.println( "4... " +  yytext());return symbol(sym.MAPA, yytext(), yyline, yycolumn);
            }
          case 66: break;
          case 18: 
            { System.out.println( "35..." +  yytext());return symbol(sym.TRUE, yytext(), yyline, yycolumn);
            }
          case 67: break;
          case 19: 
            { System.out.println( "8... " +  yytext());return symbol(sym.TIPOJUGADORid, yytext(), yyline, yycolumn);
            }
          case 68: break;
          case 20: 
            { System.out.println( "1... " + yytext());return symbol(sym.FACIL, yytext(), yyline, yycolumn);
            }
          case 69: break;
          case 21: 
            { System.out.println( "36..." +  yytext());return symbol(sym.FALSE, yytext(), yyline, yycolumn);
            }
          case 70: break;
          case 22: 
            { System.out.println( "33... " +  yytext());return symbol(sym.TURNOID, yytext(), yyline, yycolumn);
            }
          case 71: break;
          case 23: 
            { System.out.println( "11... " +  yytext());return symbol(sym.NAVESid, yytext(), yyline, yycolumn);
            }
          case 72: break;
          case 24: 
            { System.out.println( "16... " +  yytext());return symbol(sym.FILASid, yytext(), yyline, yycolumn);
            }
          case 73: break;
          case 25: 
            { System.out.println( "3... " + yytext());return symbol(sym.HUMANO, yytext(), yyline, yycolumn);
            }
          case 74: break;
          case 26: 
            { System.out.println( "15... " +  yytext());return symbol(sym.TAMAÑOid, yytext(), yyline, yycolumn);
            }
          case 75: break;
          case 27: 
            { System.out.println( "13... " +  yytext());return symbol(sym.ALAZARid, yytext(), yyline, yycolumn);
            }
          case 76: break;
          case 28: 
            { System.out.println( "10... " +  yytext());return symbol(sym.NOMBREid, yytext(), yyline, yycolumn);
            }
          case 77: break;
          case 29: 
            { System.out.println( "2..." +  yytext());return symbol(sym.DIFICIL, yytext(), yyline, yycolumn);
            }
          case 78: break;
          case 30: 
            { System.out.println( "28... " +  yytext());return symbol(sym.TABLEROID, yytext(), yyline, yycolumn);
            }
          case 79: break;
          case 31: 
            { System.out.println( "7... " +  yytext());return symbol(sym.PLANETAS, yytext(), yyline, yycolumn);
            }
          case 80: break;
          case 32: 
            { System.out.println( "9... " +  yytext());return symbol(sym.PLANETASid, yytext(), yyline, yycolumn);
            }
          case 81: break;
          case 33: 
            { System.out.println( "20... " +  yytext());return symbol(sym.ACUMULARid, yytext(), yyline, yycolumn);
            }
          case 82: break;
          case 34: 
            { System.out.println( "17... " +  yytext());return symbol(sym.COLUMNASid, yytext(), yyline, yycolumn);
            }
          case 83: break;
          case 35: 
            { System.out.println( "28... " +  yytext());return symbol(sym.UBICACIONID, yytext(), yyline, yycolumn);
            }
          case 84: break;
          case 36: 
            { System.out.println( "21... " +  yytext());return symbol(sym.NEUTRALES, yytext(), yyline, yycolumn);
            }
          case 85: break;
          case 37: 
            { System.out.println( "5... " +  yytext());return symbol(sym.JUGADORES, yytext(), yyline, yycolumn);
            }
          case 86: break;
          case 38: 
            { System.out.println( "19... " +  yytext());return symbol(sym.MAPACIEGOid, yytext(), yyline, yycolumn);
            }
          case 87: break;
          case 39: 
            { System.out.println( "24... " +  yytext());return symbol(sym.PRODUCCIONid, yytext(), yyline, yycolumn);
            }
          case 88: break;
          case 40: 
            { System.out.println( "29... " +  yytext());return symbol(sym.MOVIMIENTOSID, yytext(), yyline, yycolumn);
            }
          case 89: break;
          case 41: 
            { System.out.println( "22... " +  yytext());return symbol(sym.MOSTRARNAVESid, yytext(), yyline, yycolumn);
            }
          case 90: break;
          case 42: 
            { System.out.println( "25... " +  yytext());return symbol(sym.FINALIZACIONid, yytext(), yyline, yycolumn);
            }
          case 91: break;
          case 43: 
            { System.out.println( "32... " +  yytext());return symbol(sym.NAVESENVIADASID, yytext(), yyline, yycolumn);
            }
          case 92: break;
          case 44: 
            { System.out.println( "30... " +  yytext());return symbol(sym.PLANETAORIGENID, yytext(), yyline, yycolumn);
            }
          case 93: break;
          case 45: 
            { System.out.println( "31... " +  yytext());return symbol(sym.PLANETADESTINOID, yytext(), yyline, yycolumn);
            }
          case 94: break;
          case 46: 
            { System.out.println( "12... " +  yytext());return symbol(sym.PORMUERTESid, yytext(), yyline, yycolumn);
            }
          case 95: break;
          case 47: 
            { System.out.println( "18... " +  yytext());return symbol(sym.PLANETASNEUTRALESid, yytext(), yyline, yycolumn);
            }
          case 96: break;
          case 48: 
            { System.out.println( "6... " +  yytext());return symbol(sym.PLANETASNEUTRALES, yytext(), yyline, yycolumn);
            }
          case 97: break;
          case 49: 
            { System.out.println( "23... " +  yytext());return symbol(sym.MOSTRARESTADISTICASid, yytext(), yyline, yycolumn);
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
