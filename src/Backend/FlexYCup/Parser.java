
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 29 16:25:38 CST 2020
//----------------------------------------------------

package Backend.FlexYCup;

import java.util.LinkedList;
import java_cup.runtime.*;
import Backend.Clases.ErrorS;
import java.util.ArrayList;
import Backend.Clases.Planeta;
import Backend.Clases.Jugador;
import Backend.Clases.Mapa;
import Backend.Clases.PlanetaNeutral;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 29 16:25:38 CST 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\004\000\002\005" +
    "\007\000\002\005\010\000\002\005\010\000\002\005\010" +
    "\000\002\005\004\000\002\005\003\000\002\023\002\000" +
    "\002\006\011\000\002\024\002\000\002\006\010\000\002" +
    "\025\002\000\002\006\007\000\002\026\002\000\002\006" +
    "\007\000\002\027\002\000\002\006\007\000\002\030\002" +
    "\000\002\006\007\000\002\031\002\000\002\006\010\000" +
    "\002\032\002\000\002\006\007\000\002\006\004\000\002" +
    "\006\003\000\002\033\002\000\002\004\007\000\002\034" +
    "\002\000\002\004\007\000\002\004\004\000\002\004\003" +
    "\000\002\035\002\000\002\007\007\000\002\036\002\000" +
    "\002\007\007\000\002\037\002\000\002\007\007\000\002" +
    "\007\004\000\002\007\003\000\002\010\004\000\002\010" +
    "\004\000\002\014\004\000\002\014\004\000\002\040\002" +
    "\000\002\013\011\000\002\041\002\000\002\013\007\000" +
    "\002\042\002\000\002\013\007\000\002\043\002\000\002" +
    "\013\007\000\002\013\004\000\002\044\002\000\002\013" +
    "\005\000\002\013\003\000\002\045\002\000\002\012\011" +
    "\000\002\046\002\000\002\012\007\000\002\047\002\000" +
    "\002\012\007\000\002\050\002\000\002\012\007\000\002" +
    "\012\004\000\002\051\002\000\002\012\005\000\002\012" +
    "\003\000\002\016\004\000\002\016\004\000\002\052\002" +
    "\000\002\003\011\000\002\003\007\000\002\003\010\000" +
    "\002\003\004\000\002\053\002\000\002\003\005\000\002" +
    "\003\003\000\002\054\002\000\002\017\007\000\002\017" +
    "\004\000\002\017\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\040\005\001\002\000\004\002\325\001" +
    "\002\000\016\004\014\005\007\006\010\041\013\044\006" +
    "\053\012\001\002\000\016\004\014\005\007\006\010\041" +
    "\013\044\006\053\012\001\002\000\004\042\260\001\002" +
    "\000\004\042\214\001\002\000\004\002\000\001\002\000" +
    "\004\042\141\001\002\000\004\002\ufffa\001\002\000\004" +
    "\042\015\001\002\000\004\040\016\001\002\000\026\013" +
    "\025\014\026\015\030\024\022\025\027\026\024\027\031" +
    "\035\023\041\021\044\020\001\002\000\016\004\014\005" +
    "\007\006\010\041\013\044\006\053\012\001\002\000\026" +
    "\013\025\014\026\015\030\024\022\025\027\026\024\027" +
    "\031\035\023\041\021\044\020\001\002\000\016\004\uffe8" +
    "\005\uffe8\006\uffe8\041\uffe8\044\uffe8\053\uffe8\001\002\000" +
    "\004\042\133\001\002\000\004\042\127\001\002\000\004" +
    "\042\123\001\002\000\004\042\117\001\002\000\004\042" +
    "\111\001\002\000\004\042\105\001\002\000\004\042\063" +
    "\001\002\000\004\042\032\001\002\000\004\040\033\001" +
    "\002\000\014\030\037\031\035\034\036\041\040\044\034" +
    "\001\002\000\014\030\037\031\035\034\036\041\040\044" +
    "\034\001\002\000\004\042\056\001\002\000\004\042\052" +
    "\001\002\000\004\042\044\001\002\000\026\013\uffda\014" +
    "\uffda\015\uffda\024\uffda\025\uffda\026\uffda\027\uffda\035\uffda" +
    "\041\uffda\044\uffda\001\002\000\026\013\uffed\014\uffed\015" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\035\uffed\041\uffed" +
    "\044\uffed\001\002\000\026\013\025\014\026\015\030\024" +
    "\022\025\027\026\024\027\031\035\023\041\021\044\020" +
    "\001\002\000\016\004\uffec\005\uffec\006\uffec\041\uffec\044" +
    "\uffec\053\uffec\001\002\000\006\047\046\050\047\001\002" +
    "\000\014\030\uffe1\031\uffe1\034\uffe1\041\uffe1\044\uffe1\001" +
    "\002\000\034\013\uffac\014\uffac\015\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\034\uffac\035\uffac\041" +
    "\uffac\044\uffac\001\002\000\034\013\uffab\014\uffab\015\uffab" +
    "\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\034" +
    "\uffab\035\uffab\041\uffab\044\uffab\001\002\000\014\030\037" +
    "\031\035\034\036\041\040\044\034\001\002\000\026\013" +
    "\uffe0\014\uffe0\015\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\035\uffe0\041\uffe0\044\uffe0\001\002\000\004\052\053\001" +
    "\002\000\014\030\uffdd\031\uffdd\034\uffdd\041\uffdd\044\uffdd" +
    "\001\002\000\014\030\037\031\035\034\036\041\040\044" +
    "\034\001\002\000\026\013\uffdc\014\uffdc\015\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\035\uffdc\041\uffdc\044\uffdc\001" +
    "\002\000\006\047\046\050\047\001\002\000\014\030\uffdf" +
    "\031\uffdf\034\uffdf\041\uffdf\044\uffdf\001\002\000\014\030" +
    "\037\031\035\034\036\041\040\044\034\001\002\000\026" +
    "\013\uffde\014\uffde\015\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\035\uffde\041\uffde\044\uffde\001\002\000\026\013\uffdb" +
    "\014\uffdb\015\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\035" +
    "\uffdb\041\uffdb\044\uffdb\001\002\000\004\040\064\001\002" +
    "\000\012\016\071\023\065\041\070\044\066\001\002\000" +
    "\004\042\101\001\002\000\012\016\071\023\065\041\070" +
    "\044\066\001\002\000\026\013\ufff7\014\ufff7\015\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\035\ufff7\041\ufff7\044\ufff7" +
    "\001\002\000\026\013\uffe2\014\uffe2\015\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\035\uffe2\041\uffe2\044\uffe2\001\002" +
    "\000\004\042\072\001\002\000\004\052\073\001\002\000" +
    "\012\016\uffe7\023\uffe7\041\uffe7\044\uffe7\001\002\000\012" +
    "\016\071\023\065\041\070\044\066\001\002\000\026\013" +
    "\uffe6\014\uffe6\015\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\035\uffe6\041\uffe6\044\uffe6\001\002\000\026\013\025\014" +
    "\026\015\030\024\022\025\027\026\024\027\031\035\023" +
    "\041\021\044\020\001\002\000\016\004\ufff6\005\ufff6\006" +
    "\ufff6\041\ufff6\044\ufff6\053\ufff6\001\002\000\026\013\uffe3" +
    "\014\uffe3\015\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\035" +
    "\uffe3\041\uffe3\044\uffe3\001\002\000\004\052\102\001\002" +
    "\000\012\016\uffe5\023\uffe5\041\uffe5\044\uffe5\001\002\000" +
    "\012\016\071\023\065\041\070\044\066\001\002\000\026" +
    "\013\uffe4\014\uffe4\015\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\035\uffe4\041\uffe4\044\uffe4\001\002\000\006\047\046" +
    "\050\047\001\002\000\026\013\ufff1\014\ufff1\015\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\035\ufff1\041\ufff1\044\ufff1" +
    "\001\002\000\026\013\025\014\026\015\030\024\022\025" +
    "\027\026\024\027\031\035\023\041\021\044\020\001\002" +
    "\000\016\004\ufff0\005\ufff0\006\ufff0\041\ufff0\044\ufff0\053" +
    "\ufff0\001\002\000\004\043\112\001\002\000\004\007\113" +
    "\001\002\000\004\043\ufff9\001\002\000\004\043\115\001" +
    "\002\000\026\013\025\014\026\015\030\024\022\025\027" +
    "\026\024\027\031\035\023\041\021\044\020\001\002\000" +
    "\016\004\ufff8\005\ufff8\006\ufff8\041\ufff8\044\ufff8\053\ufff8" +
    "\001\002\000\006\047\046\050\047\001\002\000\026\013" +
    "\ufff5\014\ufff5\015\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\035\ufff5\041\ufff5\044\ufff5\001\002\000\026\013\025\014" +
    "\026\015\030\024\022\025\027\026\024\027\031\035\023" +
    "\041\021\044\020\001\002\000\016\004\ufff4\005\ufff4\006" +
    "\ufff4\041\ufff4\044\ufff4\053\ufff4\001\002\000\006\047\046" +
    "\050\047\001\002\000\026\013\uffef\014\uffef\015\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\035\uffef\041\uffef\044\uffef" +
    "\001\002\000\026\013\025\014\026\015\030\024\022\025" +
    "\027\026\024\027\031\035\023\041\021\044\020\001\002" +
    "\000\016\004\uffee\005\uffee\006\uffee\041\uffee\044\uffee\053" +
    "\uffee\001\002\000\004\052\130\001\002\000\026\013\uffeb" +
    "\014\uffeb\015\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\035" +
    "\uffeb\041\uffeb\044\uffeb\001\002\000\026\013\025\014\026" +
    "\015\030\024\022\025\027\026\024\027\031\035\023\041" +
    "\021\044\020\001\002\000\016\004\uffea\005\uffea\006\uffea" +
    "\041\uffea\044\uffea\053\uffea\001\002\000\004\052\134\001" +
    "\002\000\026\013\ufff3\014\ufff3\015\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\035\ufff3\041\ufff3\044\ufff3\001\002\000" +
    "\026\013\025\014\026\015\030\024\022\025\027\026\024" +
    "\027\031\035\023\041\021\044\020\001\002\000\016\004" +
    "\ufff2\005\ufff2\006\ufff2\041\ufff2\044\ufff2\053\ufff2\001\002" +
    "\000\016\004\uffe9\005\uffe9\006\uffe9\041\uffe9\044\uffe9\053" +
    "\uffe9\001\002\000\004\002\uffff\001\002\000\004\037\142" +
    "\001\002\000\006\040\145\044\143\001\002\000\006\040" +
    "\145\044\143\001\002\000\004\036\211\001\002\000\014" +
    "\010\151\032\152\033\150\041\153\044\146\001\002\000" +
    "\014\010\151\032\152\033\150\041\153\044\146\001\002" +
    "\000\004\036\uffbd\001\002\000\004\042\200\001\002\000" +
    "\004\042\172\001\002\000\004\042\156\001\002\000\010" +
    "\036\uffb4\040\uffb6\044\uffb6\001\002\000\006\040\145\044" +
    "\143\001\002\000\004\036\uffb5\001\002\000\004\037\157" +
    "\001\002\000\010\036\163\043\162\044\160\001\002\000" +
    "\010\036\163\043\162\044\160\001\002\000\014\010\151" +
    "\032\152\033\150\041\153\044\146\001\002\000\004\007" +
    "\164\001\002\000\014\010\uffb0\032\uffb0\033\uffb0\041\uffb0" +
    "\044\uffb0\001\002\000\004\043\165\001\002\000\010\036" +
    "\uffb3\043\uffb3\044\uffb3\001\002\000\010\036\163\043\162" +
    "\044\160\001\002\000\014\010\uffb2\032\uffb2\033\uffb2\041" +
    "\uffb2\044\uffb2\001\002\000\004\036\uffb9\001\002\000\014" +
    "\010\uffb1\032\uffb1\033\uffb1\041\uffb1\044\uffb1\001\002\000" +
    "\004\043\173\001\002\000\004\007\174\001\002\000\004" +
    "\043\175\001\002\000\014\010\uffbb\032\uffbb\033\uffbb\041" +
    "\uffbb\044\uffbb\001\002\000\014\010\151\032\152\033\150" +
    "\041\153\044\146\001\002\000\004\036\uffba\001\002\000" +
    "\004\043\201\001\002\000\010\020\204\021\203\022\202" +
    "\001\002\000\004\043\uffad\001\002\000\004\043\uffae\001" +
    "\002\000\004\043\uffaf\001\002\000\004\043\206\001\002" +
    "\000\014\010\151\032\152\033\150\041\153\044\146\001" +
    "\002\000\004\036\uffb8\001\002\000\004\036\uffb7\001\002" +
    "\000\016\004\014\005\007\006\010\041\013\044\006\053" +
    "\012\001\002\000\004\002\ufffc\001\002\000\004\036\uffbc" +
    "\001\002\000\004\037\215\001\002\000\006\040\220\044" +
    "\216\001\002\000\006\040\220\044\216\001\002\000\004" +
    "\036\255\001\002\000\016\010\224\011\222\012\225\034" +
    "\226\041\227\044\221\001\002\000\016\010\224\011\222" +
    "\012\225\034\226\041\227\044\221\001\002\000\004\042" +
    "\250\001\002\000\004\036\uffd7\001\002\000\004\042\242" +
    "\001\002\000\004\042\236\001\002\000\004\042\232\001" +
    "\002\000\010\036\uffca\040\uffcc\044\uffcc\001\002\000\006" +
    "\040\220\044\216\001\002\000\004\036\uffcb\001\002\000" +
    "\004\052\233\001\002\000\016\010\uffd1\011\uffd1\012\uffd1" +
    "\034\uffd1\041\uffd1\044\uffd1\001\002\000\016\010\224\011" +
    "\222\012\225\034\226\041\227\044\221\001\002\000\004" +
    "\036\uffd0\001\002\000\004\046\237\001\002\000\016\010" +
    "\uffcf\011\uffcf\012\uffcf\034\uffcf\041\uffcf\044\uffcf\001\002" +
    "\000\016\010\224\011\222\012\225\034\226\041\227\044" +
    "\221\001\002\000\004\036\uffce\001\002\000\004\043\243" +
    "\001\002\000\004\007\244\001\002\000\004\043\uffd5\001" +
    "\002\000\004\043\246\001\002\000\016\010\224\011\222" +
    "\012\225\034\226\041\227\044\221\001\002\000\004\036" +
    "\uffd4\001\002\000\004\052\251\001\002\000\016\010\uffd3" +
    "\011\uffd3\012\uffd3\034\uffd3\041\uffd3\044\uffd3\001\002\000" +
    "\016\010\224\011\222\012\225\034\226\041\227\044\221" +
    "\001\002\000\004\036\uffd2\001\002\000\004\036\uffcd\001" +
    "\002\000\016\004\014\005\007\006\010\041\013\044\006" +
    "\053\012\001\002\000\004\002\ufffd\001\002\000\004\036" +
    "\uffd6\001\002\000\004\037\261\001\002\000\006\040\263" +
    "\044\262\001\002\000\006\040\263\044\262\001\002\000" +
    "\016\010\271\011\270\012\273\034\274\041\275\044\267" +
    "\001\002\000\004\036\265\001\002\000\016\004\014\005" +
    "\007\006\010\041\013\044\006\053\012\001\002\000\004" +
    "\002\ufffe\001\002\000\016\010\271\011\270\012\273\034" +
    "\274\041\275\044\267\001\002\000\004\042\316\001\002" +
    "\000\004\042\310\001\002\000\004\036\uffd9\001\002\000" +
    "\004\042\304\001\002\000\004\042\300\001\002\000\010" +
    "\036\uffbe\040\uffc0\044\uffc0\001\002\000\006\040\263\044" +
    "\262\001\002\000\004\036\uffbf\001\002\000\004\052\301" +
    "\001\002\000\016\010\uffc5\011\uffc5\012\uffc5\034\uffc5\041" +
    "\uffc5\044\uffc5\001\002\000\016\010\271\011\270\012\273" +
    "\034\274\041\275\044\267\001\002\000\004\036\uffc4\001" +
    "\002\000\004\046\305\001\002\000\016\010\uffc3\011\uffc3" +
    "\012\uffc3\034\uffc3\041\uffc3\044\uffc3\001\002\000\016\010" +
    "\271\011\270\012\273\034\274\041\275\044\267\001\002" +
    "\000\004\036\uffc2\001\002\000\004\043\311\001\002\000" +
    "\004\007\312\001\002\000\004\043\uffc9\001\002\000\004" +
    "\043\314\001\002\000\016\010\271\011\270\012\273\034" +
    "\274\041\275\044\267\001\002\000\004\036\uffc8\001\002" +
    "\000\004\052\317\001\002\000\016\010\uffc7\011\uffc7\012" +
    "\uffc7\034\uffc7\041\uffc7\044\uffc7\001\002\000\016\010\271" +
    "\011\270\012\273\034\274\041\275\044\267\001\002\000" +
    "\004\036\uffc6\001\002\000\004\036\uffc1\001\002\000\004" +
    "\036\uffd8\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\005\010\001\001\000\004\005\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\016\001\001\000\004\005\137\001\001\000" +
    "\004\006\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\040\001\001\000" +
    "\004\007\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\041\001" +
    "\001\000\004\006\042\001\001\000\002\001\001\000\004" +
    "\015\044\001\001\000\004\035\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\053\001\001\000" +
    "\004\007\054\001\001\000\002\001\001\000\004\015\056" +
    "\001\001\000\004\036\057\001\001\000\004\007\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\066\001\001\000\002\001\001\000\004\004" +
    "\077\001\001\000\004\024\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\073\001" +
    "\001\000\004\004\074\001\001\000\002\001\001\000\004" +
    "\006\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\102\001\001\000\004\004\103" +
    "\001\001\000\002\001\001\000\004\015\105\001\001\000" +
    "\004\027\106\001\001\000\004\006\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\113\001\001\000\002\001\001\000\004\006\115\001\001" +
    "\000\002\001\001\000\004\015\117\001\001\000\004\025" +
    "\120\001\001\000\004\006\121\001\001\000\002\001\001" +
    "\000\004\015\123\001\001\000\004\030\124\001\001\000" +
    "\004\006\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\130\001\001\000\004\006\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\134\001\001" +
    "\000\004\006\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\143" +
    "\001\001\000\004\016\212\001\001\000\002\001\001\000" +
    "\004\003\146\001\001\000\004\003\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\153\001\001\000\004\016\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\160\001" +
    "\001\000\004\017\170\001\001\000\004\003\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\165\001\001\000\004\017\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\175" +
    "\001\001\000\004\003\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\216\001\001\000\004" +
    "\014\256\001\001\000\002\001\001\000\004\013\222\001" +
    "\001\000\004\013\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\227\001\001\000\004\014\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\233\001" +
    "\001\000\004\013\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\237\001\001\000\004\013\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\244\001\001\000\002\001\001\000\004\013" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\251\001\001\000\004\013\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\263\001\001\000\004\010\322\001\001\000\004\012\271" +
    "\001\001\000\002\001\001\000\004\005\265\001\001\000" +
    "\002\001\001\000\004\012\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\275\001\001\000\004\010\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\301\001\001\000\004\012\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\305\001\001\000\004\012" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\312\001\001\000\002\001\001\000" +
    "\004\012\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\317\001\001\000\004\012\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Planeta> planetas = new ArrayList();
    public static ArrayList<Jugador> jugadores= new ArrayList();
    public static ArrayList<PlanetaNeutral> planetasNeutrales = new ArrayList();
    public static Mapa mapa = new Mapa();
    LinkedList tablaErroresSintacticos =  new LinkedList();
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila =  s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo"  );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        tablaErroresSintacticos.add(error);
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        tablaErroresSintacticos.add(error);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



    String nombre;
    int naves;
    int produccion;
    float porcentajeMuertes;
    boolean neutral;
    boolean miboolean;
    int numeroNaves;
    int punteo;
    ArrayList<Planeta> planetasConquistados  = new ArrayList();
    int[ ] tamMapa = new int[2];
    String tipo;
    Planeta planeta  = new Planeta();
    PlanetaNeutral planetaNeutral  = new PlanetaNeutral();
    String padre;
   
    String padreCarpeta;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // booleano ::= FALSE 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(bool+"kjkj");miboolean = Boolean.parseBoolean(bool.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleano",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // booleano ::= TRUE 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println(bool+"kjkj"); miboolean = Boolean.parseBoolean(bool.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleano",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipoJugador ::= HUMANO 
            {
              Object RESULT =null;
		tipo = "HUMANO"; System.out.println("tipo2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoJugador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipoJugador ::= DIFICIL 
            {
              Object RESULT =null;
		tipo = "COMPUTADORA DIFICIL"; System.out.println("tipo2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoJugador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipoJugador ::= FACIL 
            {
              Object RESULT =null;
		tipo = "COMPUTADORA FACIL"; System.out.println("tipo2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoJugador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpoPlanetasJugador ::= CORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJugador",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpoPlanetasJugador ::= COMA cuerpoPlanetasJugador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJugador",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpoPlanetasJugador ::= COMILLA ID COMILLA NT$25 cuerpoPlanetasJugador 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJugador",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$25 ::= 
            {
              Object RESULT =null;
		int planetaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int planetaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object planeta = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 System.out.println(planeta+"   "+  planetasConquistados.size()); Planeta miPlaneta= new Planeta(); miPlaneta.setNombre(planeta.toString()); planetasConquistados.add(miPlaneta); System.out.println("despues"+planetasConquistados.size());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpoJugadoresJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;
		System.out.println(planetasConquistados.get(0).getNombre()); 
                                                  System.out.println("guarda****"); 
                                                  ArrayList<Planeta> plan = new ArrayList(); 
                                                    Jugador jugador = new Jugador(nombre, planeta.asignarPlanetasArreglos(planetasConquistados,plan ), tipo ); 
                                                    System.out.println(jugador.getPlanetasConquistados().get(0).getNombre()); 
                                                    Parser.jugadores.add(jugador); planetasConquistados.clear();
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpoJugadoresJason ::= CIERRACORCHETE NT$24 jugadoresJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$24 ::= 
            {
              Object RESULT =null;
System.out.println(planetasConquistados.get(0).getNombre()); 
                                                    System.out.println("guarda****"); 
                                                    ArrayList<Planeta> plan = new ArrayList(); 
                                                    Jugador jugador = new Jugador(nombre, planeta.asignarPlanetasArreglos(planetasConquistados,plan ), tipo ); 
                                                    System.out.println(jugador.getPlanetasConquistados().get(0).getNombre()); 
                                                    Parser.jugadores.add(jugador); planetasConquistados.clear();
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cuerpoJugadoresJason ::= COMA cuerpoJugadoresJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpoJugadoresJason ::= TIPOJUGADORid DOSPUNTOS COMILLA tipoJugador COMILLA cuerpoJugadoresJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpoJugadoresJason ::= PLANETASid DOSPUNTOS CORCHETEABRE cuerpoPlanetasJugador cuerpoJugadoresJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpoJugadoresJason ::= NOMBREid DOSPUNTOS COMILLA ID COMILLA NT$23 cuerpoJugadoresJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nomJugadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nomJugadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nomJugador = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJugadoresJason",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$23 ::= 
            {
              Object RESULT =null;
		int nomJugadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nomJugadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object nomJugador = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
System.out.println("nombre"); nombre = nomJugador.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // jugadoresJason ::= COMA jugadoresJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jugadoresJason",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // jugadoresJason ::= ABRECORCHETE cuerpoJugadoresJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jugadoresJason",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpoPlanetasNeutralesJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpoPlanetasNeutralesJason ::= CIERRACORCHETE NT$22 planetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$22 ::= 
            {
              Object RESULT =null;
System.out.println( nombre+ naves+ produccion+porcentajeMuertes+ false +"neutral");PlanetaNeutral planetaNuevo = new PlanetaNeutral(nombre, naves, produccion,porcentajeMuertes, true); Parser.planetasNeutrales.add(planetaNuevo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpoPlanetasNeutralesJason ::= COMA cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpoPlanetasNeutralesJason ::= PORMUERTESid DOSPUNTOS NUMMUERTES NT$21 cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int porMuertesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int porMuertesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object porMuertes = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$21 ::= 
            {
              Object RESULT =null;
		int porMuertesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int porMuertesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object porMuertes = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
porcentajeMuertes =  Float.parseFloat(porMuertes.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpoPlanetasNeutralesJason ::= PRODUCCIONid DOSPUNTOS ENTERO NT$20 cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int produccion1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int produccion1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object produccion1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$20 ::= 
            {
              Object RESULT =null;
		int produccion1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int produccion1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object produccion1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
produccion = Integer.parseInt( produccion1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpoPlanetasNeutralesJason ::= NAVESid DOSPUNTOS ENTERO NT$19 cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numeroNavesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numeroNavesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object numeroNaves = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$19 ::= 
            {
              Object RESULT =null;
		int numeroNavesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroNavesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numeroNaves = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
naves = Integer.parseInt( numeroNaves.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpoPlanetasNeutralesJason ::= NOMBREid DOSPUNTOS COMILLA ID NT$18 COMILLA cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreMiPlanetaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreMiPlanetaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombreMiPlaneta = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasNeutralesJason",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$18 ::= 
            {
              Object RESULT =null;
		int nombreMiPlanetaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreMiPlanetaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombreMiPlaneta = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
nombre = nombreMiPlaneta.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpoPlanetasJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;
		System.out.println( nombre+ naves+ produccion+porcentajeMuertes+ false +"neutral");Planeta planetaNuevo = new Planeta(nombre, naves, produccion,porcentajeMuertes, false); Parser.planetas.add(planetaNuevo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpoPlanetasJason ::= CIERRACORCHETE NT$17 planetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$17 ::= 
            {
              Object RESULT =null;
System.out.println( nombre+ naves+ produccion+porcentajeMuertes+ false );Planeta planetaNuevo = new Planeta(nombre, naves, produccion,porcentajeMuertes, false); Parser.planetas.add(planetaNuevo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpoPlanetasJason ::= COMA cuerpoPlanetasJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpoPlanetasJason ::= PORMUERTESid DOSPUNTOS NUMMUERTES NT$16 cuerpoPlanetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int porMuertesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int porMuertesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object porMuertes = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$16 ::= 
            {
              Object RESULT =null;
		int porMuertesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int porMuertesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object porMuertes = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
porcentajeMuertes =  Float.parseFloat(porMuertes.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpoPlanetasJason ::= PRODUCCIONid DOSPUNTOS ENTERO NT$15 cuerpoPlanetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int produccion1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int produccion1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object produccion1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$15 ::= 
            {
              Object RESULT =null;
		int produccion1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int produccion1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object produccion1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
produccion = Integer.parseInt( produccion1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpoPlanetasJason ::= NAVESid DOSPUNTOS ENTERO NT$14 cuerpoPlanetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numeroNavesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numeroNavesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object numeroNaves = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$14 ::= 
            {
              Object RESULT =null;
		int numeroNavesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeroNavesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numeroNaves = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
naves =Integer.parseInt( numeroNaves.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpoPlanetasJason ::= NOMBREid DOSPUNTOS COMILLA ID NT$13 COMILLA cuerpoPlanetasJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nombreMiPlanetaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreMiPlanetaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object nombreMiPlaneta = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoPlanetasJason",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$13 ::= 
            {
              Object RESULT =null;
		int nombreMiPlanetaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreMiPlanetaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombreMiPlaneta = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
nombre = nombreMiPlaneta.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // planetasJason ::= COMA planetasJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("planetasJason",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // planetasJason ::= ABRECORCHETE cuerpoPlanetasJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("planetasJason",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // planetasNeutralesJason ::= COMA planetasNeutralesJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("planetasNeutralesJason",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // planetasNeutralesJason ::= ABRECORCHETE cuerpoPlanetasNeutralesJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("planetasNeutralesJason",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpoNeutrales ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpoNeutrales ::= COMA cuerpoNeutrales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpoNeutrales ::= PRODUCCIONid DOSPUNTOS ENTERO NT$12 cuerpoNeutrales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numProduccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numProduccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object numProduccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$12 ::= 
            {
              Object RESULT =null;
		int numProduccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numProduccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numProduccion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
planetaNeutral.setProduccion(Integer.parseInt(numProduccion.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpoNeutrales ::= MOSTRARESTADISTICASid DOSPUNTOS booleano NT$11 cuerpoNeutrales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$11 ::= 
            {
              Object RESULT =null;
planetaNeutral.setMostrarEstadisticas(miboolean);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cuerpoNeutrales ::= MOSTRARNAVESid DOSPUNTOS booleano NT$10 cuerpoNeutrales 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoNeutrales",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$10 ::= 
            {
              Object RESULT =null;
System.out.println( miboolean); planetaNeutral.setMostrarNaves(miboolean);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cuerpoTamañoId ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoTamañoId",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpoTamañoId ::= COMA cuerpoTamañoId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoTamañoId",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpoTamañoId ::= COLUMNASid DOSPUNTOS ENTERO NT$9 cuerpoTamañoId 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int columnasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int columnasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object columnas = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoTamañoId",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$9 ::= 
            {
              Object RESULT =null;
		int columnasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int columnasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object columnas = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
tamMapa[1]=  Integer.parseInt(columnas.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpoTamañoId ::= FILASid DOSPUNTOS ENTERO NT$8 cuerpoTamañoId 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int filasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int filasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object filas = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoTamañoId",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$8 ::= 
            {
              Object RESULT =null;
		int filasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int filasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object filas = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
tamMapa[0]= Integer.parseInt(filas.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mapaJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mapaJason ::= COMA mapaJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mapaJason ::= FINALIZACIONid DOSPUNTOS ENTERO NT$7 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numFinalizacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numFinalizacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object numFinalizacion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT =null;
		int numFinalizacionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numFinalizacionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numFinalizacion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Parser.mapa.setFinalizacion(Integer.parseInt(numFinalizacion.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mapaJason ::= NEUTRALES DOSPUNTOS ABRECORCHETE cuerpoNeutrales NT$6 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =null;
Parser.mapa.setPlanetasNeutrales(planetaNeutral);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mapaJason ::= ACUMULARid DOSPUNTOS booleano NT$5 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isAcumularleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isAcumularright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object isAcumular = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$5 ::= 
            {
              Object RESULT =null;
		int isAcumularleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isAcumularright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object isAcumular = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Parser.mapa.setAcumular(miboolean);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // mapaJason ::= MAPACIEGOid DOSPUNTOS booleano NT$4 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$4 ::= 
            {
              Object RESULT =null;
Parser.mapa.setMapaCiego(miboolean);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mapaJason ::= PLANETASNEUTRALESid DOSPUNTOS ENTERO NT$3 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numPlanetasNeutrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numPlanetasNeutrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object numPlanetasNeutros = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int numPlanetasNeutrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numPlanetasNeutrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object numPlanetasNeutros = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Parser.mapa.setNumeroPlanetasNeutrales(Integer.parseInt(numPlanetasNeutros.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mapaJason ::= ALAZARid DOSPUNTOS booleano NT$2 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
System.out.println( miboolean);Parser.mapa.setAlAzar(miboolean);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mapaJason ::= TAMAÑOid DOSPUNTOS ABRECORCHETE cuerpoTamañoId NT$1 mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
Parser.mapa.setTamaño(tamMapa);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // mapaJason ::= IDid DOSPUNTOS COMILLA ID NT$0 COMILLA mapaJason 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idMapaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idMaparight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idMapa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapaJason",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int idMapaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idMaparight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idMapa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Parser.mapa.setIdMapa(idMapa.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpoJason ::= CIERRACORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJason",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpoJason ::= COMA cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJason",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpoJason ::= JUGADORES DOSPUNTOS CORCHETEABRE jugadoresJason CORCHETECIERRA cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJason",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpoJason ::= PLANETAS DOSPUNTOS CORCHETEABRE planetasJason CORCHETECIERRA cuerpoJason 
            {
              Object RESULT =null;
		System.out.println( "222OOOOOOOOOO" );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJason",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpoJason ::= PLANETASNEUTRALES DOSPUNTOS CORCHETEABRE planetasNeutralesJason CORCHETECIERRA cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJason",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpoJason ::= MAPA DOSPUNTOS ABRECORCHETE mapaJason cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpoJason",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ABRECORCHETE cuerpoJason 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

